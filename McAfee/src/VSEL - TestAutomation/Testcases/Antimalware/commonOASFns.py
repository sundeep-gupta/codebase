# Copyright (C) 2010 McAfee, Inc. All rights reserved
import subprocess
import sys
import os
import logging
import re
import shutil
import time

# Add common folder into the sys path for module importing
sys.path.append("../Common")
import commonFns
import LinuxShieldConfigParser
import commonAntiMalwareFns

commonAntiMalwareFns.NAILS_CONFIG = '/var/opt/NAI/LinuxShield/etc/nailsd.cfg'
def enableOAS():
    """
    Function to Enable On-Access-Scan
    @return : True on success, False otherwise
    """
    try :
        _cmd = [commonAntiMalwareFns.NAILS, 'on-access', '--enable']
        _retval = subprocess.call(_cmd)#, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if _retval == 0 :
            time_elapsed = 0
            while ( time_elapsed < 300):
                if isOASEnabled() :
                    return True
                logging.debug("Waiting for oas to enable")
                time.sleep(5)
                time_elapsed = time_elapsed + 5
            return isOASEnabled()
        logging.error("commonAntimalwareFns.enableOAS : oas enable command returned %s" % _retval)
    except :
        logging.error("commonAntimalwareFns.enableOAS : nails command failed with exception")
        return False

def disableOAS():
    """
    Disable On-Access-Scan
    @return : True on success, False otherwise
    """
    try :
        _cmd = [commonAntiMalwareFns.NAILS, 'on-access', '--disable']
        _retval = subprocess.call(_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if _retval == 0 :
            time_elapsed = 0
            while ( time_elapsed < 120):
                if not isOASEnabled() :
                    return True
                time.sleep(5)
                time_elapsed = time_elapsed + 5
            return not isOASEnabled()
        logging.error("commonAntimalwareFns.disableOAS : oas enable command returned %s" % _retval)
    except :
        logging.error("commonAntimalwareFns.disableOAS : nails command failed with exception")
        return False

def isOASEnabled():
    """
    Return the status of the On-Access-Scan
    RETURN : True if OAS is enabled, False otherwise
    """
    try :
        _cmd = [commonAntiMalwareFns.NAILS, 'on-access', '--status']
        _p = subprocess.Popen(_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if _p is None :
            logging.error("commonAntimalwareFns.isOASEnabled : unable to create process for nailsd")
            return False
        _p.wait()
        _status = _p.stdout.readlines()[0]
        if re.match('Disable', _status) is not None :
            return False
        elif re.match('Enable', _status) is not None :
            # Command said Enable. Now check if process is running.
            return commonFns.isProcessRunning('scanner')
        else :
            logging.error("Unidentified status %s " % _status)
            return False
    except :
        logging.error("commonAntimalwareFns.disableOAS : nails command failed with exception")
        return False


def setOASPrimaryAction(action):
    """
    Fn to set the OAS Primary Action
    @param action - string containing the action to set.
    """
    if action is None or not isinstance(action, str) :
        logging.error("commonAntimalwareFns.setOASPrimaryAction : Invalid argument")
        return False
    if action not in commonAntiMalwareFns.VALID_ACTIONS :
        logging.error("commonAntimalwareFns.setOASPrimaryAction : Invalid action %s" % action)
        return False
    
    if not LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.action.Default.primary': action}) :
        logging.error('Failed to write into config file.')
        return False
    if action == 'Block' :
        if not LinuxShieldConfigParser.deleteConfigKey(commonAntiMalwareFns.NAILS_CONFIG, 'nailsd.profile.OAS.action.Default.secondary') :
            logging.error('Failed to write into config file.')
            return False
        
    return commonAntiMalwareFns.nailsReload()

def setOASSecondaryAction(action):
    """
    Fn to set the OAS Secondary Action
    @param action - string containing the action to set.
    """
    if action is None or not isinstance(action, str) :
        logging.error("commonAntimalwareFns.setOASSecondaryAction : Invalid argument")
        return False
    logging.debug("Reading OAS Primary to find valid secondary action.")
    _primary_action = getOASPrimaryAction()
    if _primary_action == action :
        logging.error("Cannot set primary and secondary action to same")
        return False
    _valid_actions = commonAntiMalwareFns.getValidSecondaryActions(_primary_action)
    if action not in _valid_actions :
        logging.error("commonAntimalwareFns.setOASSecondaryAction : Invalid action %s" % action)
        return False
    if not LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.action.Default.secondary': action}) :
        logging.error('Failed to write into config file')
        return False
    return commonAntiMalwareFns.nailsReload()


def getOASPrimaryAction():
    """
    Fn to get the primary action of OAS
    """
   
    return LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG, 'nailsd.profile.OAS.action.Default.primary')

def getOASSecondaryAction() :
    """
    Fn to get the secondary action of OAS
    """
    return LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG, 'nailsd.profile.OAS.action.Default.secondary')

def enableMacroScanning():
    """Enable macroAnalysis
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.macroAnalysis' : 'true'}) : 
        return commonAntiMalwareFns.nailsReload()
    return False
    
def disableMacroScanning():
    """Disabling macroAnalysis
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.macroAnalysis' : 'false'}) : 
        return commonAntiMalwareFns.nailsReload()
    return False
def isMacroScanningEnabled():
    """Return macroAnalysis status
    """
    return LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG, 'nailsd.profile.OAS.macroAnalysis')
def enableNetworkScanning() :
    """
    Fn to enable network scanning for OAS
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.scanNWFiles' : 'true'}) : 
        return commonAntiMalwareFns.nailsReload()
    return False

def disableNetworkScanning():
    """
    Fn to disable network scanning for OAS
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.scanNWFiles': 'false'}) :
        return commonAntiMalwareFns.nailsReload()
    return False
    
def isNetworkScanningEnabled() :
    """
    Fn to get the status of network scanning.
    """
    _val = LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG, 'nailsd.profile.OAS.scanNWFiles')
    if _val is not None :
        if re.search('true', _val) is not None :
            return True
        else :
            return False
    logging.error('Could not retrive value for newtork scanning')
    return False
def enableOASArchiveScanning():
    """
    Fn to enable archive scanning for OAS
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.decompArchive': 'true'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def disableOASArchiveScanning():
    """
    Fn to disable archive scanning for OAS
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.decompArchive': 'false'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def isOASArchiveScanningEnabled():
    """
    Fn to get the status of network scanning.
    """
    _val = LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG,'nailsd.profile.OAS.decompArchive')
    if _val is not None :
        if re.search('true', _val) is not None :
            return True
        else :
            return False
    logging.error('Could not retrieve value for decompress archive')
    return False

def enableOASScanOnRead():
    """
    Fn to enable scanning on read
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.scanOnRead': 'true'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def disableOASScanOnRead():
    """
    Fn to disable scanning on read
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.scanOnRead': 'false'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def isOASScanOnReadEnabled():
    """
    Fn to get the status of scanOnRead.
    """
    _val = LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG,'nailsd.profile.OAS.scanOnRead')
    if _val is not None :
        if re.search('true', _val) is not None :
            return True
        else :
            return False
    logging.error('Could not retrieve value for scanning on read')
    return False


def enableOASScanOnWrite():
    """
    Fn to enable scanning on write
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.scanOnWrite': 'true'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def disableOASScanOnWrite():
    """
    Fn to disable scanning on write
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.scanOnWrite': 'false'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def isOASScanOnWriteEnabled():
    """
    Fn to get the status of scanOnWrite.
    """
    _val = LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG,'nailsd.profile.OAS.scanOnWrite')
    if _val is not None :
        if re.search('true', _val) is not None :
            return True
        else :
            return False
    logging.error('Could not retrieve value for scanning on write')
    return False

def enableOASJokesScan():
    """
    Function to enable 'Jokes' scanning
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.noJokes': 'true'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def disableOASJokesScan():
    """
    Function to disable 'Jokes' scanning
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.noJokes': 'false'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def isOASJokesScanEnabled():
    """
    Fn to get the status of 'Jokes' scan.
    """
    _val = LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG,'nailsd.profile.OAS.noJokes')
    if _val is not None :
        if re.search('true', _val) is not None :
            return True
        else :
            return False
    logging.error('Could not retrieve value for scanning for jokes')
    return False
def enableOASProgram ():
    """
    Function to enable 'program' scanning
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.program': 'true'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def disableOASProgram():
    """
    Function to disable 'program' scanning
    """
    if LinuxShieldConfigParser.setConfig(commonAntiMalwareFns.NAILS_CONFIG, {'nailsd.profile.OAS.program': 'false'}) :
        return commonAntiMalwareFns.nailsReload()
    return False

def isOASProgramEnabled():
    """
    Fn to get the status of 'program' scan.
    """
    _val = LinuxShieldConfigParser.getConfigKey(commonAntiMalwareFns.NAILS_CONFIG,'nailsd.profile.OAS.program')
    if _val is not None :
        if re.search('true', _val) is not None :
            return True
        else :
            return False
    logging.error('Could not retrieve value for scanning for potentially unwanted program')
    return False

def deleteOASExclusion(path) :
    """
    Function to delete the exclusion from OAS profile
    """
    if LinuxShieldConfigParser.deleteExclusion(commonAntiMalwareFns.NAILS_CONFIG, 'OAS', path) :
        return commonAntiMalwareFns.nailsReload()
    return False

def addOASExclusion(exclusion, exclusionName=None) :
    """
    Function to add OAS exclusion
    """
    if LinuxShieldConfigParser.addExclusion(commonAntiMalwareFns.NAILS_CONFIG, 'OAS', exclusion, exclusionName) :
        return commonAntiMalwareFns.nailsReload()
    return False
def getOASExclusions() :
    """
    Function to get the OAS exclusions.
    """
    return LinuxShieldConfigParser.getExclusions(commonAntiMalwareFns.NAILS_CONFIG, 'OAS')

def getOASExclusion(path) :
    """
    Function to return the exclusion having given path in OAS config
    """
    return LinuxShieldConfigParser.getExclusion(commonAntiMalwareFns.NAILS_CONFIG, 'OAS', path)

