#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-816
# TestcaseDescription: ODS and Update running simultaneously .

import sys
import logging
import time
import shutil
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append("..")
import commonFns
import commonAntiMalwareFns
import commonOASFns
import commonODSFns
# Import CommonTest module into current namespace
from CommonTest import *


# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-816")
        logging.info("Description : ODS and Update running simultaneously .");

        
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._dir_to_scan   = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/lsh_816'
        self._ods_task_name = 'lsh_ods_816'
        self._Update_taskName = 'lsh_update_816'
        self._ods_profile_name   = 'lsh_ods_816'

        if self._cleanup() != 0 :
            logging.error("Failed during initialization")
            return 1
        logging.debug('Disabling on-access scan')
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable on access scan")
            return 1
        logging.debug("Creating payload")
        if not commonAntiMalwareFns.createPayload(self._dir_to_scan, 10, 10) :
            logging.error("Failed to create Payload")

        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
       	self._datpath = self.getConfig('PAYLOAD_PATH') + '/dat/full'
        if not os.path.exists(self._datpath) :
            logging.error("Payload dat path does not exist %s " % self._datpath)

        # Old dat copying 
        if not commonAntiMalwareFns.replaceDat(self._datpath) :
            logging.error("Old dat copy failed")
            return 1
        logging.info("Old dat copy successful.")
        self.datVersion = commonAntiMalwareFns.GetDatVersion()
        # Find the time at which the task has to be scheduled.
        _time_to_start = time.time() + 300
        _struct_time = time.localtime(_time_to_start)
        # Here we are scheduling 'once' OnDemand Task. 
        self._timeTable =  {
                'type'   : 'once', 
                'day'    : str(_struct_time[2]),
                'month'  : str(_struct_time[1]),
                'year'   : str(_struct_time[0]),
                'hour'   : str(_struct_time[3]),
                'minute' : str(_struct_time[4])
        }
        if not commonAntiMalwareFns.createUpdateTask( self._Update_taskName , timeTable=self._timeTable) :
            logging.error("Failed to create ondemand task")
            return 1
        self._paths = [{'path':self._dir_to_scan}]
        if not commonODSFns.createOnDemandTask(self._paths, self._Ods_taskName, self._ods_profile_name) :
            logging.error("Failed to create ODS unscheduled task")
            return 1
	
        #  Wait till the scan sarts
        logging.debug("The Update is scheduled after 5 minutes")
        while commonAntiMalwareFns.getTaskStatus( self._Update_taskName) == 'Idle' and time.time() < _time_to_start + 120 :
            logging.debug("Waiting for Update to start")
            time.sleep(30)
        time.sleep(10)    
        if not commonAntiMalwareFns.runTask(self._ods_task_name) :
            logging.error("Failed to run ods task successfully")
            return 1

        # Wait till the update
        while commonAntiMalwareFns.getTaskStatus(self._Update_taskName) != 'Completed' :
            logging.debug("Waiting for update to complete")
            time.sleep(10)
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        #  Get the results
        self._result = commonODSFns.getODSResult(self._taskName)
        if self._result is None :
            logging.error("Failed to retrieve the result from database")
            return 1
        if self._result['infected'] != '10' :
            logging.error("Result did not match the expected" + self._result['infected'])
            return 1
        self.latestdat = commonAntiMalwareFns.GetDatVersion()
        logging.debug("Checking the dat versions %s[new] Vs %s[old] " % (self.latestdat, self.datVersion))
        if int(self.latestdat) < int(self.datVersion):
            logging.error("Update is Failed to get Latest dats")
            return 1
        logging.info("Updated with Latest dats")

        #Reloading  the nails service after update
        if commonAntiMalwareFns.nailsReload() != True:
            logging.error("Unable to Reload nails service after dat update")
            return 1
        logging.info("nails service Reload successfully after dat update")
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash 
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        _retval = 0
        logging.debug("Resetting to default product settings")
	if not commonODSFns.deleteUnscheduledODSTask(self._ods_task_name, self._ods_profile_name) :
            logging.error("Failed to remove the taskId")
            _retval = 1
	if not commonAntiMalwareFns.deleteUpdateTask(self._Update_taskName):
            logging.error("Failed to remove the Update taskId")
            _retval = 1
        
	logging.debug("deleting directory where payload was available")
        if os.path.exists(self._dir_to_scan) :
            shutil.rmtree(self._dir_to_scan)
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    retVal = 1
    logging.error("Not yet implemented")
    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
