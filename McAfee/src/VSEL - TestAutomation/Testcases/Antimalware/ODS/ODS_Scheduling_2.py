#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-429
# TestcaseDescription: Scanning virus on read,write and execute with read,write and execute permission to group with Primary

import sys
import logging
import subprocess
import time
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonODSFns
import commonFns
import commonOASFns
# Import CommonTest module into current namespace
from CommonTest import *
# Get testcase name
testcaseName = sys.argv[0][:-3]
NAILS        = '/opt/NAI/LinuxShield/bin/nails'
class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-811")
        logging.info("Description : Scanning virus on read,write and execute with read,write and execute permission to group with Primary")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._filename = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/eicar-811.txt'
        self._username = 'nails'
        self._root_uid = commonFns.getUserInfo('root')['uid']
        self._id = 'lsh-811'
        self._ods_task_name    = self._id
        self._ods_profile_name = self._id
	self._cleanup()
	
        logging.debug("Disabling the OAS")
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS")
            return 1
        logging.debug("Creating eicar file with root user")
        if not commonAntiMalwareFns.createEicarInfection(self._filename) :
            logging.error("Failed to create Eicar file")
            return 1
        os.chmod(self._filename, 0571)
        logging.debug("Creating the user %s" % self._username)
        if not commonFns.createUser(self._username) :
            logging.error("Failed to create user %s" % self._username)
            return 1
        _uinfo = commonFns.getUserInfo(self._username)
        self._user_uid = _uinfo['uid']
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
	paths = [{'path':self._filename}]
        if not commonODSFns.createOnDemandTask(paths, self._ods_task_name, self._ods_profile_name) :
            logging.error("Failed to create ODS unscheduled task")
            return 1
	taskId = commonAntiMalwareFns.getScheduleId(self._ods_task_name)
    	if taskId < 1 :
        	logging.error("Failed to get the Id for the taskName %s " % taskName)
    	logging.debug("Running task with id : %d" % taskId)
  	_p1 = subprocess.Popen([NAILS, 'task', '--run', str(taskId)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if _p1 is None :
		logging.error("Failed to create process")
  		return 1;
  	_p2 = subprocess.Popen(['sudo','-u', self._username,NAILS, 'task', '--run', str(taskId)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if _p2 is None :
		logging.error("Failed to create process")
  		return 1;
	_p1.wait()
	_p2.wait()
        # Switch the user and access the file
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(5)
        if os.path.exists(self._filename) :
            logging.error("File %s exists." % self._filename)
            return 1
        if not commonAntiMalwareFns.isFileQuarantined(  self._filename) :
            logging.debug("File not quarantined. So primary action did not occur")
        else :
            logging.debug("File got deleted. Secondary action occured")
        return 0

    def cleanup(self):
        return 0
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        self._cleanup()
        commonFns.cleanLogs()
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")
        return foundCrash

    def _cleanup(self): 
        _retval = 0
        logging.debug("Resetting the  settings to defaults")
        if not commonODSFns.deleteUnscheduledODSTask(self._ods_task_name, self._ods_profile_name) :
            logging.error("Failed to remove the taskId")
            _retval = 1
	if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        logging.debug("Deleting the file if already existing")
        if os.path.exists(self._filename) :
            os.remove(self._filename)

        logging.debug("Deleting the user %s if already present")
        if commonFns.getUserInfo(self._username) and not commonFns.deleteUser(self._username) :
            logging.error("Failed to delete the user")
            _retval = 1
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)



