#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-1904
# TestcaseDescription: Scan task for ODS for a specific folder

import sys
import logging
import shutil

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append("..")
import commonFns
import commonAntiMalwareFns
import commonOASFns
import commonODSFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        self._id = 'lsh-1904'
        logging.info("TestcaseID : lsh-1904")
        logging.info("Description : Scan task for ODS for a specific folder")
        self._payload_source   = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/payload' 
        self._dir_to_scan      = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/ods_scan'
        self._ods_task_name    = self._id
        self._ods_profile_name = self._id

        
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        if self._cleanup() != 0 :
            logging.error("Failed during initialization")
            return 1
        logging.debug('Disabling on-access scan')
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable on access scan")
            return 1

        logging.debug("Creating payload")
        if not commonAntiMalwareFns.createPayload(self._dir_to_scan, 10, 10) :
            logging.error("Failed to create Payload")
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        logging.debug("Creating OnDemand Task")
        paths = [{'path':self._dir_to_scan}]
        if not commonODSFns.createOnDemandTask(paths, self._ods_task_name, self._ods_profile_name) :
            logging.error("Failed to create ODS unscheduled task")
            return 1
        if not commonAntiMalwareFns.runTask(self._ods_task_name) :
            logging.error("Failed to run ods task successfully")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        logging.debug("Getting the result for ods scan")
        self._result = commonODSFns.getODSResult(self._ods_task_name)
        if self._result is None :
            logging.error("Failed to retrieve the result from database")
            return 1
        if self._result['infected'] != '10' :
            logging.error("Result did not match the expected" + self._result['infected'])
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        _retval = 0
        logging.debug("Resetting to default product settings")
        if not commonODSFns.deleteUnscheduledODSTask(self._ods_task_name, self._ods_profile_name) :
            logging.error("Failed to remove the taskId")
            _retval = 1
        logging.debug("deleting directory where payload was available")
        if os.path.exists(self._dir_to_scan) :
            shutil.rmtree(self._dir_to_scan)
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
