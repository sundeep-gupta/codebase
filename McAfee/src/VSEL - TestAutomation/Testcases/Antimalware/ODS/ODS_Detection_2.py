#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-760
# TestcaseDescription:ODS scans on network mounted volumes 

import sys
import logging

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append("..")
import commonFns
import subprocess
import commonOASFns
import commonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-760")
        logging.info("Description : ODS scans on network mounted volumes")
        self._nfs      = 'nfs'
        self._hostname_nfs = self.getConfig('NFS_HOST')
        self._sharenfs    = self.getConfig('NFS_SHARE')
        self._mntptnfs    = '/mnt/nfs_share'
        self._filename_nfs = self._mntptnfs + "/" + 'test-eicar-file-lsh-760.txt'
        
	self._smb    = 'smbfs'
        self._user     = self.getConfig('SMB_USER')
        self._pass     = self.getConfig('SMB_PASS')
        self._hostname_smb = self.getConfig('SMB_HOST')
        self._sharesmb    = self.getConfig('SMB_SHARE')
        self._mntptsmb    = '/mnt/smbfs_share'
        self._filename_smb = self._mntptsmb + "/" + 'test-eicar-file-lsh-760.txt'
        self._id = 'lsh-760'
        self._ods_task_name    = self._id
        self._ods_profile_name = self._id
 
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        if self._cleanup() != 0 :
            logging.error("Failed during initialization")
            return 0
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        logging.debug("Running Disable OAS")
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS")
            return 1
        
        #  mount nfs volume
        logging.debug("Running mount command")
        if not commonFns.mount({'type' : self._nfs, 'source':self._hostname_nfs, 'mountpt':self._mntptnfs,
                'share' : self._sharenfs}) :
            logging.error("Failed to mount NFS")
            return 1
        commonAntiMalwareFns.createEicarInfection(self._filename_nfs)
        
	logging.debug("Running mount command")
        if not commonFns.mount({'type' : self._smb, 'source':self._hostname_smb, 'mountpt':self._mntptsmb,
                'share' : self._sharesmb, 'username':self._user, 'password':self._pass}) :
            logging.error("Failed to mount")
            return 1
        commonAntiMalwareFns.createEicarInfection(self._filename_smb)
        
	paths = [{'path':self._mntptnfs}, {'path':self._mntptsmb}]
        if not commonODSFns.createOnDemandTask(paths, self._ods_task_name, self._ods_profile_name) :
            logging.error("Failed to create ODS unscheduled task")
            return 1
        if not commonAntiMalwareFns.runTask(self._ods_task_name) :
            logging.error("Failed to run ods task successfully")
            return 1
        logging.debug("Getting the result for ods scan")
        self._result = commonODSFns.getODSResult(self._ods_task_name)
        if self._result is None :
            logging.error("Failed to retrieve the result from database")
            return None
        logging.debug("Result : " + self._result.__str__())
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        if not self._result :
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        _retval = 0
        logging.debug("Resetting to default product settings")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        logging.debug("deleting eicar file if present")
        if os.path.exists(self._filename_nfs) :
            os.remove(self._filename_nfs)
        if os.path.exists(self._filename_smb) :
            os.remove(self._filename_smb)
        logging.debug("Running 'umount' command")
        if not commonFns.umount(self._mntptnfs) :
            logging.info("Failed to 'umount as the share would not have mounted or already unmounted'")
        if not commonFns.umount(self._mntptsmb) :
            logging.info("Failed to 'umount as the share would not have mounted or already unmounted'")
        
	return 0

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()
    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()
    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()
      
    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
