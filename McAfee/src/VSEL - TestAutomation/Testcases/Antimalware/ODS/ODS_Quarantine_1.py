#!/usr/bin/env spython
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-733
# TestcaseDescription: Create Quarantine directory in NFS share and perform Quarantine 
import sys
import logging
import shutil
import time
import ftplib
import subprocess

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonFns
import commonOASFns
import commonAntiMalwareFns
import LinuxShieldConfigParser

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]
NAILS_CONFIG = '/var/opt/NAI/LinuxShield/etc/nailsd.cfg'

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-733")
        logging.info("Description :  Create Quarantine directory in NFS share and perform Quarantine")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        logging.debug("Setting VSEL preferences to defaults")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to set VSEL preferences to defaults")
            return 1
        logging.debug("Disabling OAS")
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable scan on read")
            return 1
        try :
            logging.debug("Finding the NFS server information from config")
            self._nfs      = 'nfs'
            self._hostname = self.getConfig('NFS_HOST')
            self._share    = self.getConfig('NFS_SHARE')
            self._mntpt    = '/mnt/nfs_share'
            self._nfs_qurantine = self._mntpt + "/quarantine"
            self._filename = "/tmp/test_nfs_eicar.txt"
        except :
            logging.error("Failed to read the environment config")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        #  mount nfs volume
        logging.debug("Running mount command")
        if not commonFns.mount({'type' : self._nfs, 'source':self._hostname, 'mountpt':self._mntpt,
                'share' : self._share}) :
            logging.error("Failed to mount")
            return 1

        try :
            logging.debug("creating %s directory for quarantine" % self._nfs_qurantine)
            os.mkdir(self._nfs_qurantine)
        except :
            logging.error("Failed to create the directory %s" % self._nfs_qurantine)
            return 1

        if not LinuxShieldConfigParser.setConfig(NAILS_CONFIG, {'nailsd.profile.OAS.quarantineDirectory' : self._nfs_qurantine}) : 
            logging.error('Failed to set quarantine directory as %s.' % self._nfs_qurantine)
            return 1
        if not commonAntiMalwareFns.nailsReload() :
            logging.error("Failed to reload linuxshield")
            return 1

        if not commonAntiMalwareFns.createEicarInfection(self._filename) or not os.path.exists(self._filename):
            logging.debug("Failed to create eicar file")
            return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(10)
        logging.debug("Checking if file exists")
        if os.path.exists(self._filename) :
            logging.error("File %s exist" % self._filename)
            return 1
        logging.debug("Checking if file is quarantined")
        if not commonAntiMalwareFns.isFileQuarantined(os.path.abspath(self._filename)) :
            logging.error("File is not quarantined")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        _retval = 0
        logging.debug("Resetting to default product settings")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        logging.debug("deleting eicar file if present")
        if os.path.exists(self._filename) :
            os.remove(self._filename)

        logging.debug("Removing %s directory" % self._nfs_qurantine)
        if os.path.isdir(self._nfs_qurantine) :
            shutil.rmtree(self._nfs_qurantine)

        logging.debug("Running 'umount' command")
        if not commonFns.umount(self._mntpt) :
            logging.info("Failed to 'umount as the share would not have mounted or already unmounted'")
            _retval = 0

        return 0


    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
