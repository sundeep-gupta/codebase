#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.

import subprocess
import logging
import time
import sys
import os
import optparse
if sys.version_info < (2, 5) :
    raise "Running scripts require Python 2.5 or greater"
# Add common folder into the sys path for module importing
testcaseDir = os.path.dirname(os.path.abspath(sys.argv[0]))

sys.path.append(testcaseDir + "/../Common")
import commonFns

def main():
    
    parser = optparse.OptionParser(description="*** A driver script which will invoke oas bvt scripts on all available file systems. ***",
                    version="*** AUTHOR - Autobots ***"'\n'
                                         "%prog version-1.0",
                                    usage='%prog  arguments')
    parser.add_option("--loglevel","-l",action="store", dest="log_value",default="info",
                      help = "Specify the level of logging needed. Default level is info")
    parser.add_option("--install","-i",action="store", dest="install_URL",
                      help = "Complete URL or path of the MSM installer. If this option is not specified, installation and uninstallation will be skipped")
    options, arguments = parser.parse_args()
    
    if os.getuid() != 0:
        print ("The script should be invoked as root")
        sys.exit(1)

    logLevel = logging.DEBUG
    # Parameter provided, set the log level accordingly
    if(options.log_value == "debug"):
        logLevel=logging.DEBUG
    elif(options.log_value == "info"):
        logLevel=logging.INFO
    elif(options.log_value == "warning"):
        logLevel=logging.WARNING
    elif(options.log_value == "error"):
        logLevel=logging.ERROR
    elif(options.log_value == "critical"):
        logLevel=logging.CRITICAL

    # Set log format with time/date, logLevel and message
    logFormat='%(asctime)s %(levelname)-8s %(message)s'

    # Set date format
    logDateFmt='%d %b %H:%M:%S'

    # Set log file name
    logFileName=testcaseDir + "/../Logs/"+sys.argv[0][:-2]+"log"

    print ("Consolidated log would be available in " + logFileName)
    sys.stdout.flush()
    # Set log file mode as write
    logFileMode='w'

    # Now, configure the logging
    logging.basicConfig(level=logLevel,
            format=logFormat,
            datefmt=logDateFmt,
            filename=logFileName,
            filemode=logFileMode) 

    # Lets switch to the common tc directory
    #install
    if options.install_URL :
        if os.path.exists(options.install_URL) :
            options.install_URL = os.path.abspath(options.install_URL)
        logging.debug("Buildpath is " + options.install_URL)
        os.chdir(testcaseDir + "/../Common")
        logging.info("Starting installation")
        retval = subprocess.call([ "python", "Install.py", options.log_value,options.install_URL])
        if retval == 0:
            print "Test Install passed"
            logging.info("Installation:PASS")
        else:
            print "Test Install failed"
            logging.info("Installation:FAIL")
            sys.exit(1)
        # Lets switch back
        os.chdir(testcaseDir)
    else:
        logging.info("Skipping installation")
    fileSystemPartitions = commonFns.getAllFileSystemPartitions()
    if fileSystemPartitions :
        logging.info("Now running the tests")
        runTests(fileSystemPartitions, options.log_value)

    if options.install_URL != None:
        os.chdir(testcaseDir + "/../Common")
        rc = subprocess.call( [ "python", "Uninstall.py", options.log_value ],\
                stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        if rc == 0:
            print "Test Uninstall passed"
            logging.info("===RESULT:Un-Installation:PASS")
        else:
            print "Test Uninstall failed"
            logging.info("===RESULT:Un-Installation:FAIL")
        # Lets switch to the directory where we are invoked from
        os.chdir(testcaseDir)
    else:
        logging.info("Skipping uninstallation")
    return 0

def runTests(fileSystemPartitions, log_value):
    testCases = [
                 {
                    'name' : 'OAS_BVT_2.py',
                    'path' : 'OAS',
                    'desc' : 'Primary clean and secondary delete on eicar file'
                  },
                 {
                    'name' : 'OAS_BVT_6.py',
                    'path' : 'OAS',
                    'desc' : 'Test the installation using EICAR.com test virus'
                  },
                  {'name' : 'OAS_Adhoc_1.py',
                    'path' : 'OAS',
                    'desc' : 'Number of infections reported by OAS from archived file.'
                  },
                  {'name' : 'OAS_Detection_2.py',
                    'path' : 'OAS',
                    'desc' : 'OAS on packed executable.'
                  },
                  {'name' : 'OAS_Scan_Actions_1.py',
                    'path' : 'OAS',
                    'desc' : 'Scanning virus on read,write and execute with read,write and execute permission to group with Primary.'
                  },
                  {'name' : 'OAS_Scan_Actions_2.py',
                    'path' : 'OAS',
                    'desc' : 'Scanning virus on read with readonly permission to group with Primary: Quarantine Secondary: Access.'
                  },
                  {'name' : 'OAS_Scan_Actions_3.py',
                    'path' : 'OAS',
                    'desc' : 'Scanning virus on read with readonly permission to group with Primary: Quarantine Secondary: Access.'
                  },
                  {'name' : 'OAS_Scan_Actions_5.py',
                    'path' : 'OAS',
                    'desc' : 'Find unknown macro viruses.'
                  }
                 ]
    for type, partition in fileSystemPartitions.items() :
        if not os.path.exists(partition + '/VSEL_Test') :
            os.mkdir(partition + '/VSEL_Test')
        print "Running All tests for File System : %s which is in partition %s" % (type, partition)
        logging.info("Running All tests for File System : %s which is in partition %s" % (type, partition))
        for tc in testCases :
            _filename = partition + '/VSEL_Test'
            try :
                os.chdir(testcaseDir + '/' + tc['path'])
                _r = subprocess.call(['python', tc['name'], log_value , _filename], stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE)
                logging.debug("return value for Test %s is " % tc['name'])
                if _r == 0 :
                    print "Test %s passed" % tc["name"]
                    logging.info("Result of test case:%s:PASS" % tc["desc"])
                else :
                    print "Test %s failed" % tc["name"]
                    logging.info("Result of test case:%s:FAIL" % tc["desc"])
                os.chdir(testcaseDir)
                logfile = testcaseDir + '/../Logs/' + tc['name'][:-3] + '.log'
                if os.path.exists(logfile) :
                    os.rename(logfile, logfile[:-4] + '_' + type + '.log')
                if os.path.isdir(logfile[:-4]) :
                    os.rename(logfile[:-4], logfile[:-4] + '_' + type)
            except :
                print "Unable to execute %s" % tc['name']
                logging.error("Unable to execute %s" % tc["name"])
        print "Test for File System %s completed " % type
        logging.info("Test for File System %s completed " % type)
            
if __name__ == '__main__' :
    main()
