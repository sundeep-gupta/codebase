#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-724
# TestcaseDescription:  Find unknown macro viruses

import sys
import os
import logging
import shutil
import subprocess
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonAntiMalwareFns
import commonOASFns
import commonFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-724")
        logging.info("Description : Find unknown macro viruses")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._macro_file_source = self.getConfig('PAYLOAD_PATH') + '/macros'
        self._macro_file_target = os.path.dirname(os.path.abspath(sys.argv[0])) + '/lsh-724'
        if  len(sys.argv) > 2 and sys.argv[2] :
            self._filename = sys.argv[2] + '/eicar-724.txt'
        if self._cleanup() != 0 :
            return 1 
        if not os.path.exists(self._macro_file_source) :
            logging.error("Payload directory does not exist.")
            return 1
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS for payload copy")
            return 1
        try :
            logging.debug("Copying the payload")
            shutil.copytree(self._macro_file_source, self._macro_file_target)
        except :
            logging.error("Failed to copy the payload")
            return 1

        if not commonOASFns.enableOAS() :
            logging.error("Failed to enable OAS after payload copy")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        # Run with Macros Disabled
        if not commonOASFns.disableMacroScanning() :
            logging.error("Failed to disable macro scanning")
            return 1
        arg = [False]
        logging.debug('Walking throught the macro file target')
        os.path.walk(self._macro_file_target, self._readMacro, arg)
        logging.debug("Checkig length of arg")
        if len(arg) != 1 :
            arg.pop(0)
            logging.error("Following files got deleted which should not have occured")
            for i in arg :
                logging.error(i)

        if not commonOASFns.enableMacroScanning() :
            logging.error("Failed to disable macro scanning")
            return 1

        arg = [True]
        os.path.walk(self._macro_file_target, self._readMacro, arg)
        if len(arg) != 1 :
            arg.pop(0)
            logging.error("Following files got deleted which should not have occured")
            for i in arg :
                logging.error(i)
        return 0

    def _readMacro(self, arg, dirname, fnames):
        for f in fnames :
            try :
                logging.debug("Running file command on %s" % dirname + '/' + f)
                subprocess.call(['file', dirname + '/' + f], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            except :
                logging.error("Exception occured during file")
            if os.path.exists(dirname + '/' + f) :
                if  arg[0] :
                    arg.append(dirname + '/' + f)
            elif not arg[0] :
                    arg.append(dirname + '/' + f)
            
    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash
    
    def _cleanup(self):
        _retval = 0
        logging.debug("Resetting to defaults")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        logging.debug("Removing the macro target directory")
        if os.path.exists(self._macro_file_target) :
            shutil.rmtree(self._macro_file_target)
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
