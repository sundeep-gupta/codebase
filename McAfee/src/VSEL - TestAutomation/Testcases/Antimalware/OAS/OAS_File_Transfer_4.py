#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-130
# TestcaseDescription:  OAS when file transfer happens using ftp
import sys
import logging
import time
import ftplib

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonFns
import commonOASFns
import commonAntiMalwareFns

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-130")
        logging.info("Description :  OAS when file transfer happens using ftp")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        logging.debug("Setting VSEL preferences to defaults")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to set VSEL preferences to defaults")
            return 1
        try :
            logging.debug("Finding the FTP server information from config")
            self._ftp_host = self.getConfig('FTP_HOST')
            self._ftp_user = self.getConfig('FTP_USER')
            self._ftp_pass = self.getConfig('FTP_PASS')
            self._source = self.getConfig('FTP_FILE')
            self._target = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/eicar_lsh130.txt'
        except :
            logging.error("Failed to read the environment config")
            return 1
        if os.path.exists(self._target) :
            os.remove(self._target)
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        logging.debug("Disabling scan on read")
        if not commonOASFns.disableOASScanOnRead() :
            logging.error("Failed to disable scan on read")
            return 1
        logging.debug("Enabling scan on write")
        if not commonOASFns.enableOASScanOnWrite() :
            logging.error("Failed to enable scan on write")
            return 1
        # Now connect to FTP and get eicar file.
        try :
            logging.debug("Connecting to FTP server %s %s %s " % (self._ftp_host, self._ftp_user, self._ftp_pass))
            ftp = ftplib.FTP(self._ftp_host)
            ftp.login(self._ftp_user, self._ftp_pass)

            logging.debug("Getting the file")
            fh = open(self._target, 'wb')
            ftp.retrlines("RETR %s" % self._source, fh.write)
            fh.close()
            ftp.quit()
        except :
            logging.error("Exception occured during ftp get")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(10)
        logging.debug("Checking if file exists")
        if os.path.exists(self._target) :
            logging.error("File %s exist" % self._target)
            return 1
        logging.debug("Checking if file is quarantined")
        if not commonAntiMalwareFns.isFileQuarantined(os.path.abspath(self._target)) :
            logging.error("File is not quarantined")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
