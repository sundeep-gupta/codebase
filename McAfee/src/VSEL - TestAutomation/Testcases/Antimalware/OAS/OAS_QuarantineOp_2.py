#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-960
# TestcaseDescription: Quarantine an infected packed archive file

import sys
import logging
import shutil
import subprocess
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonAntiMalwareFns
import commonOASFns
import commonFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]


class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-960")
        logging.info("Description : Quarantine an infected packed archive file")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._par_file_source = self.getConfig('PAYLOAD_PATH') + '/par'
        self._par_file_target = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/lsh-960'
        # TODO : Replace with exact file name
        self._par_file = self._par_file_target + '/archive.tar.gz'
        
        if self._cleanup() != 0 :
            return 1 
        if not os.path.exists(self._par_file_source) :
            logging.error("Payload directory does not exist.")
            return 1

        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS for payload copy")
            return 1
        try :
            logging.debug("Copying the payload from %s to %s" % (self._par_file_source, self._par_file_target))
            shutil.copytree(self._par_file_source, self._par_file_target)
        except :
            logging.error("Failed to copy the payload")
            return 1
        
        if not commonOASFns.enableOAS() :
            logging.error("Failed to enable OAS after payload copy")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        # Read the par file and it should get errored out 
        logging.debug("Enabling archive scanning.")
        if not commonOASFns.enableOASArchiveScanning() :
            logging.error("Failed to enable archive scanning")
        try :
            retval = subprocess.call(['cat', self._par_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            if retval == 0:
                logging.error("Expected the file access to fail")
                return 1
        except :
            pass
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        if os.path.exists(self._par_file) :
            logging.error("File %s exist which should have got quarantined!")
            return 1
        logging.debug("Checking if file is quarantined")
        if not commonAntiMalwareFns.isFileQuarantined(self._par_file) :
            logging.error("File is not quarantined")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        _retval = 0
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        logging.debug("Checking if target dir %s exists" % self._par_file_target)
        if os.path.exists(self._par_file_target) :
            shutil.rmtree(self._par_file_target)
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
