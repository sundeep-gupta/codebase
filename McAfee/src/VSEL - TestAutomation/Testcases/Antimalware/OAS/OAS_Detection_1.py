#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-43
# TestcaseDescription:  Encrypted Infected files


import sys
import logging
import subprocess
import shutil

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonFns
import commonOASFns
import commonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-43")
        logging.info("Description : Encrypted Infected files")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._e_infected_source = self.getConfig('PAYLOAD_PATH') + '/encrypted'
        self._e_infected_target = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/lsh-43'
        if sys.argv[2] :
            self._e_infected_target = sys.argv[2] + '/lsh-43'
        self._e_infected_targt2 = self._e_infected_target + '_dest'
        if self._cleanup() != 0 :
            return 1
        
        logging.debug("Disabling the OAS to copy the payload")
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS")
            return 1
        try :
            logging.debug("copying the payload from %s to %s" % (self._e_infected_source, self._e_infected_target))
            shutil.copytree(self._e_infected_source, self._e_infected_target)
        except :
            logging.error("Failed to copy the payload")
            return 1
        logging.debug("Enabling the OAS")
        if not commonOASFns.enableOAS() :
            logging.error("Enable the OAS failed.")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        # TODO : access the encrypted archive file.
        try :
            shutil.copytree(self._e_infected_target, self._e_infected_targt2)
        except :
            logging.error("Failed in copying")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        # TODO : Check the message for failure
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash
    def _cleanup(self) :
        _retval = 0
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        if os.path.exists(self._e_infected_target) :
            shutil.rmtree(self._e_infected_target)
        if os.path.exists(self._e_infected_targt2) :
            shutil.rmtree(self._e_infected_targt2)
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
