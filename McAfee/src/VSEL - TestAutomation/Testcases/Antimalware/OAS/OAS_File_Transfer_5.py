#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID : lsh-129
# TestcaseDescription:  OAS when files transfer happens using http 

import sys
import logging

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append("..")
import commonFns
import commonAntiMalwareFns
import commonOASFns
# Import CommonTest module into current namespace
from CommonTest import *
import time

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-129")
        logging.info("Description : OAS when files transfer happens using http") 

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._url = 'http://www.eicar.org/download/eicar.com.txt'
        self._target = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/eicar_lsh129.txt'

        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        
        if not commonFns.downloadFile(self._url, self._target) :
            logging.debug("Failed to download file")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(10)
        logging.debug("Checking if file exists")
        if os.path.exists(self._target) :
            logging.error("File %s exist" % self._target)
            return 1
        logging.debug("Checking if file is quarantined")
        if not commonAntiMalwareFns.isFileQuarantined(os.path.abspath(self._target)) :
            logging.error("File is not quarantined")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        if os.path.exists(self._target) :
            os.remove(self._target)
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
