#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-151
# Testcase Description: OAS when file is transferred from a Windows client to SMB share in Linux box and vice versa

import sys
import logging
import time
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonFns
import commonOASFns
import commonAntiMalwareFns
import shutil
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-151")
        logging.info("Description : OAS when file is transferred from a Windows client to SMB share in Linux box and vice versa")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._mountpt = '/mnt/smb151'
        self._target = os.path.dirname(os.path.abspath(sys.argv[0])) +  '/data'
        self._filename = 'eicar-smb.txt'
        try :
            self._smb_host = self.getConfig('SMB_HOST')
            self._smb_user = self.getConfig('SMB_USER')
            self._smb_pass = self.getConfig('SMB_PASS')
            self._smb_share = self.getConfig('SMB_SHARE')
        except :
            logging.error("Failed to read the config info.")
            return 1

        if self._cleanup() != 0 :
            return 1
        
        logging.debug("Disabling OAS")
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS")
            return 1
        logging.debug("Disabling scan On read")
        if not commonOASFns.disableOASScanOnRead() :
            logging.error("Failed to disable scan on read")
            return 1

        logging.debug("Mounting the SMB")
        _param = { 'type' : 'smbfs', 'source' : self._smb_host, 'share' : self._smb_share,
                'username': self._smb_user, 'password' : self._smb_pass , 'mountpt' : self._mountpt}
        if not commonFns.mount(_param) :
            logging.error("Failed to do smb mount")
            return 1
        logging.debug("creating the payload at SMB mount")
        if not commonAntiMalwareFns.createEicarInfection( self._mountpt + '/' + self._filename) :
            logging.error("Failed to create the eicar infection")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        logging.debug("Enabling the OAS")
        if not commonOASFns.enableOAS() :
            logging.error("Failed to enable OAS")
            return 1
        try :
            logging.debug("Copying the file from SMB share to local file system")
            shutil.copy( self._mountpt + '/' + self._filename, self._target + '/' + self._filename)
        except :
            logging.debug("File copy failed as expected")
            return 0
        return 1

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(10)
        logging.debug("Checking if file exists")
        if os.path.exists(self._target + '/' + self._filename) :
            logging.error("File %s exists" % self._target + '/' + self._filename )
            return 1
        logging.debug("Checking if file is quarantined")
        if not commonAntiMalwareFns.isFileQuarantined(self._target + '/' + self._filename) :
            logging.error("File is not quarantined, as expected")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        logging.debug("Checking if file already exists")
        if os.path.exists(self._mountpt + '/' + self._filename) :
            os.remove(self._mountpt + '/' + self._filename)
            
        logging.debug("umounting the mountpoint if it is already mounted")
        if os.path.ismount(self._mountpt) and not commonFns.umount(self._mountpt) :
            return 1
        return 0

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
