#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-149
# TestcaseDescription: OAS when eicar.com is moved from nfs share to /tmp location 

import sys
import logging

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append("..")
import commonFns
import subprocess
import commonOASFns
import commonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-149")
        logging.info("Description : OAS when eicar.com is moved from nfs share to /tmp location")
        self._nfs      = 'nfs'
        self._hostname = self.getConfig('NFS_HOST')
        self._share    = self.getConfig('NFS_SHARE')
        self._mntpt    = '/mnt/nfs_share'
        self._filename = self._mntpt + "/" + 'test-eicar-file-lsh-149.txt'
        
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        if self._cleanup() != 0 :
            logging.error("Failed during initialization")
            return 0
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        logging.debug("Running Disable OAS")
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS")
            return 1
        
        #  mount nfs volume
        logging.debug("Running mount command")
        if not commonFns.mount({'type' : self._nfs, 'source':self._hostname, 'mountpt':self._mntpt,
                'share' : self._share}) :
            logging.error("Failed to mount")
            return 1

        logging.debug("Creating eicar file in NFS Volume %s" % self._filename)
        commonAntiMalwareFns.createEicarInfection(self._filename)
        if not commonOASFns.enableOAS() :
            logging.error("Failed to enable OAS")
            return 1
        _cmd = ['cp', self._filename, '/tmp']
        _p = subprocess.call(_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        if _p!= 0 :
            logging.info("Failed to copy from NFS to /tmp")
            return 0
        return 1

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        if os.path.exists(self._filename) :
            logging.info("File %s existing!" % self._filename)
            return 0
        logging.debug("Checking if file is quarantined")
        if commonAntiMalwareFns.isFileQuarantined(self._filename) :
            logging.error("File is quarantined")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        _retval = 0
        logging.debug("Resetting to default product settings")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        logging.debug("deleting eicar file if present")
        if os.path.exists(self._filename) :
            os.remove(self._filename)
        logging.debug("Running 'umount' command")
        if not commonFns.umount(self._mntpt) :
            logging.info("Failed to 'umount as the share would not have mounted or already unmounted'")
            _retval = 0
        return 0

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()
    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()
    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()
      
    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
