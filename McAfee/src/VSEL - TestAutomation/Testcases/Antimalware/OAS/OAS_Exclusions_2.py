#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-2267
# TestcaseDescription: Exclude files and directories with [0-9] wildcard exclusions

import sys
import logging
import shutil

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append("..")
import commonFns
import commonOASFns
import commonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-2267")
        logging.info("Description : Exclude files and directories with [0-9] wildcard exclusions")
	self.dir1="/home/tmp"
	self.dir2= "/home/tmp1/"
        self._filename1 = self.dir1+"/"+'lsh-2266-eicar-test.txt'
        self._filename2 = self.dir2+'lsh-2266-eicar-test.txt'
        self.exclude = {'path':self.dir1+"[0-9]", 'subdir':'true'}
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        if self._cleanup() != 0 :
            logging.error("Failed during initialization")
            return 1
        return 0

    def execute(self):
	logging.info("Executing testcase %s" % testcaseName)	
	if not os.path.exists(self.dir1) :
		os.mkdir(self.dir1)
	if not os.path.exists(self.dir2) :
		os.mkdir(self.dir2)
 	if not commonOASFns.addOASExclusion(self.exclude):
        	logging.error("Failed to set exclusion")
		return 1;
        commonAntiMalwareFns.createEicarInfection(self._filename1)
        commonAntiMalwareFns.createEicarInfection(self._filename2)
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        if os.path.exists(self._filename1) :
            logging.error("File %s exist which is expected")
        if os.path.exists(self._filename2) :
            logging.error("File %s exists ehich is expected")
            return 0
        return 1

    def cleanup(self):
	# Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self) :
        _retval = 0
        if not commonOASFns.deleteOASExclusion(self.dir1+"[0-9]"):
        	logging.error("delete excluded is failed")
        if os.path.exists(self.dir1):
		shutil.rmtree(self.dir1)
        if os.path.exists(self.dir2):
        	shutil.rmtree(self.dir2)
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
