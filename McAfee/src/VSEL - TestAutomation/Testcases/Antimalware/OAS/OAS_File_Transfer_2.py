#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-131
# TestcaseDescription:  OAS when file transfer happens using scp
import sys
import logging
import time
import ftplib
import subprocess

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonFns
import commonOASFns
import commonAntiMalwareFns

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-134")
        logging.info("Description :  OAS when file transfer happens from ext2 to ext3")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        logging.debug("Setting VSEL preferences to defaults")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to set VSEL preferences to defaults")
            return 1
        logging.debug("Disabling scan on write")
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable scan on read")
            return 1
        try :
            logging.debug("Finding the SSH server information from config")
            self._ext2_partion = self.getConfig('EXT2_PARTITION')
            self._ext3_partion = self.getConfig('EXT3_PARTITION')
            self._src_filename = self._ext2_partion + '/test-ext2-eicar-file.txt'
            self._dst_filename = self._ext3_partion + '/test-ext3-eicar-file.txt'
        except :
            logging.error("Failed to read the environment config")
            return 1
        if os.path.exists(self._src_filename) :
            os.remove(self._src_filename)
        if not commonAntiMalwareFns.createEicarInfection(self._src_filename) or not os.path.exists(self._src_filename):
            logging.error("Failed to create eicar file")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # Now create an eicar file on EXT2.
        try :
            logging.debug("Enabling OAS")
            if not commonOASFns.enableOAS() :
                logging.error("Unable to enable OAS")
                return 1
            _cmd = ['cp', self._src_filename, self._dst_filename]
            _r = subprocess.call(_cmd)
            if _r != 0 :
                logging.info("Failed to copy the file")
                return 0
        except :
            logging.debug("Exception occured during cmd execution")
            return 0
        return 1

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(10)
        logging.debug("Checking if file exists")
        if os.path.exists(self._src_filename) :
            logging.error("File %s exist" % self._src_filename)
            return 1
        logging.debug("Checking if file is quarantined")
        if not commonAntiMalwareFns.isFileQuarantined(os.path.abspath(self._src_filename)) :
            logging.error("File is not quarantined")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
