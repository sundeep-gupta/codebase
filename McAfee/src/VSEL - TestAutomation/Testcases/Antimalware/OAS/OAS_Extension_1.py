#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-231
# TestcaseDescription: Exclude specific file types/dir 

import sys
import logging

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonAntiMalwareFns
import commonOASFns
import shutil
import commonFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-231")
        logging.info("Description : Exclude specific file types/dir ")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._dir_to_excl = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/lsh-231'
        self._file = self._dir_to_excl + '/eicar.txt'
        self._exclusion = {'path' : self._dir_to_excl, 'subdir' : 'true'}
        if self._cleanup() != 0 :
            return 1
        if not os.path.exists(self._dir_to_excl) :
            os.mkdir(self._dir_to_excl)
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if not commonOASFns.addOASExclusion(self._exclusion) :
            logging.error("Failed to set the exclusion")
            return 1
        logging.debug("Creating the eicar file in excluded directory")
        if not commonAntiMalwareFns.createEicarInfection(self._file) :
            logging.error("Failed to create the infection.")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        logging.debug("Checking if file exist")
        if not os.path.exists(self._file) :
            logging.error("Could not find the file %s" % self._file)
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash
    def _cleanup(self) :
        if os.path.exists(self._dir_to_excl) :
            logging.debug("Removing the directory")
            shutil.rmtree(self._dir_to_excl)
        logging.debug("Resetting to defaults")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            return 1
        return 0
    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
