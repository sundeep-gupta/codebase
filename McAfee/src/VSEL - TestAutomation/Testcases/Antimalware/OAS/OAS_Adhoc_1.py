#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 246
# TestcaseDescription:Number of infections reported by OAS from archived file.

import sys
import logging
import time
import subprocess
import shutil 
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
import commonFns
sys.path.append("../")
import commonAntiMalwareFns
import commonOASFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name

testcaseName = sys.argv[0][:-3]
class TestCase(BaseTest):

    def __init__(self):
        logging.info("TestcaseID : 246")
        logging.info(" Number of infections reported by OAS from archived file.")
        self._dir_to_scan   = os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/lsh_246'
        self._tarfile= os.path.dirname(os.path.abspath(sys.argv[0])) + '/data/eicar.tar'
        if len(sys.argv) > 2 and sys.argv[2] :
            self._tarfile = sys.argv[2] + '/a.tar'
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        if not commonOASFns.disableOAS() : 
            logging.error("Unable to disable OAS")
            return 1
          
        if not commonAntiMalwareFns.createPayload(self._dir_to_scan, 10, 10) :
            logging.error("Unable to create infected file.")
            return 1
        logging.info("Successfully created infected file.")
        p=subprocess.call(['tar', '-cvf', self._tarfile, self._dir_to_scan])
        if p!=0 :
            logging.error("unable to create tar file")
            return 1
        if not commonOASFns.enableOAS() :
            logging.error("unable to enamble")
            return 1
        p=subprocess.call(['tar','-xvf', self._tarfile])
        if p!=0 :
            logging.error("unable to cat tar file")
            return 0
        return 0


    def verify(self):
	 #  Get the results
        if os.path.exists(self._tarfile) :    
            logging.error("Failed to quartine")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()
         
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")
            
        return foundCrash
          
    def _cleanup(self) :
        _retval = 0
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        if os.path.exists(self._dir_to_scan) :
            shutil.rmtree(self._dir_to_scan)
        return _retval


    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
