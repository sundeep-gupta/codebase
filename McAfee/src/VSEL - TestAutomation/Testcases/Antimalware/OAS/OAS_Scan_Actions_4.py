#!/usr/bin/env python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: lsh-678
# TestcaseDescription:  Scanning a program/joke on read,write and execute with read,write and execute pe

import sys
import logging
import shutil
import subprocess
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
sys.path.append('..')
import commonAntiMalwareFns
import commonOASFns
import commonFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : lsh-678")
        logging.info("Description : Scanning a program/joke on read,write and execute with read,write and execute pe")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._joke_file_source = self.getConfig('PAYLOAD_PATH') + '/jokes/COMJOKE.COM'
        self._joke_file_target = os.path.dirname(os.path.abspath(sys.argv[0])) + '/lsh-678'
        self._original_dat ="/opt/NAI/LinuxShield/engine/dat"
        self._original_old_dat ="/opt/NAI/LinuxShield/engine/dat_old"
        self._eit_dat=self.getConfig('PAYLOAD_PATH') + '/jokes/dat'
        if self._cleanup() != 0 :
            return 1 
        if not os.path.exists(self._joke_file_source) :
            logging.error("Payload directory does not exist.")
            return 1
        if not os.path.exists(self._joke_file_target) :
            os.mkdir(self._joke_file_target)
        if not commonOASFns.disableOAS() :
            logging.error("Failed to disable OAS for payload copy")
            return 1
        try :
            logging.debug("Copying the payload")
            shutil.move(self._original_dat,self._original_old_dat)
            shutil.copytree(self._eit_dat,self._original_dat)
        except :
            logging.error("Failed to copy the payload")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        try :
            logging.debug("Copying the payload")
            shutil.copy(self._joke_file_source, self._joke_file_target)
        except :
            logging.error("Failed to copy as expected")
            return 1
        if not commonOASFns.setOASPrimaryAction("Rename"):
            logging.error("failed to set primary action")
            return 1
        if not commonOASFns.setOASSecondaryAction("Delete"):
            logging.error("failed to set secondry action")
            return 1
        if not commonOASFns.enableOAS() :
            logging.error("Failed to enable OAS after payload copy")
            return 1
        self._jokefile_path= self._joke_file_target+"/"+"COMJOKE.COM"
        _p =subprocess.call(["file",self._jokefile_path])
        if _p!=0:
            logging.info("file comand failed as expected")
            return 0
        return 0 
            
    def verify(self):
        if os.path.exists(self._jokefile_path):
            loggging.error("file has to be delete")
            return 1
        logging.info("Verifying testcase %s" % testcaseName)
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        foundCrash = foundCrash + self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash
    
    def _cleanup(self):
        _retval = 0
        logging.debug("Resetting to defaults")
        if not commonAntiMalwareFns.resetToDefaults() :
            logging.error("Failed to reset to defaults")
            _retval = 1
        logging.debug("Removing the macro target directory")
        #if os.path.exists(self._joke_file_target) :
            #shutil.rmtree(self._joke_file_target)
        if os.path.exists(self._original_old_dat) :
            shutil.rmtree(self._original_dat)		
            shutil.move(self._original_old_dat,self._original_dat)
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal + testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
