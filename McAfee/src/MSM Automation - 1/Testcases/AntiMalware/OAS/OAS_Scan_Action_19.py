#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 10095
# TestcaseDescription: verify that primary action quarantine should be successfull on the infection found on the other part

import sys
import logging

# Add common folder into the sys path for module importing
sys.path.append("../../Common")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *
# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : 10095")
        logging.info("Description : verify that primary action quarantine should be successfull on the infection found on the other part")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._qattDir = os.path.dirname(os.path.abspath(sys.argv[0])) + "/data/qatt"
        self._infectionFilePath =  testcaseName + ".tmp"
        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        if self._cleanup() == 1 :
            logging.error("Failed performing init cleanup")
            return 1

        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        logging.debug("Setting AV Primary Action to Quarantine")
        if CommonOASFns.setAVPrimaryAction('3') != True :
            logging.error("Failed to set Primary Action to Quarantine")
            return 1
        logging.debug("Setting AV Secondary action to delete")
        if CommonOASFns.setAVSecondaryAction('2') != True :
            logging.error("Failed to set AV Secondary Action to Delete")
            return 1
        CommonOASFns.createEicarInfection(self._infectionFilePath)
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)

        logging.debug("Checking %s in Quarantine" % self._infectionFilePath)
        if CommonOASFns.isFileQuarantined(os.path.realpath(self._infectionFilePath)) :
            logging.debug("Primary Action Occured : File  Quarantined")
            return 0

        logging.debug("Checking if Secondary Action occured!")
        if not os.path.exists(self._infectionFilePath) :
            logging.debug("Secondary Action Occured : File deleted")
            return 0

        logging.error("File is neither Quarantined or deleted")
        return 1

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self):
        _retval = 0
        logging.debug("Clearing the Quarantine")
        if CommonOASFns.clearQuarantine() == False :
            _retval = 1
        logging.debug("Resetting OAS settings to factory defaults")
        if CommonOASFns.resetToDefaults() == False :
            _retval = 1

        if os.path.exists(self._infectionFilePath) :
            logging.debug("removing %s" % self._infectionFilePath)
            os.remove(self._infectionFilePath)
        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
