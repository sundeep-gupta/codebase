#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 11517
# TestcaseDescription: Scanning on close with Primary: Clean Secondary: Delete

import sys
import logging
import time
import subprocess
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath = os.getcwd() + "/data/OASInfect.24"

    def __init__(self):
        logging.info("TestcaseID : 11517")
        logging.info("Scanning on close with Primary: Clean Secondary: Delete")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        if CommonOASFns.setAVPrimaryAction('1') != True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        logging.info("Successfully set AV-PrimaryAction.")

        if CommonOASFns.setAVSecondaryAction('2') != True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        logging.info("Successfully set AV-Secondary.")
        time.sleep(5)
        if CommonOASFns.createInstallCheckInfection(self._infectFilePath) ==  False:
            logging.error("Unable to create infected file.")
            return 1
        logging.info("Successfully created infected file.")
        
        return 0

    def verify(self):
        time.sleep(5)
        _regex="Infection found: "+self._infectFilePath+" is infected with  Installation Check, type of infection"\
            +" is Test-Virus\(NOT A VIRUS\), accessed by Python, action taken is Deleted"
        if commonFns.searchProductLog(_regex) != True:
            logging.error("Regex is not matching with Notified acction")
            return 1
        if os.path.isfile(self._infectFilePath)== True :
            logging.info("file exist not deleted")
            return 1
        logging.info("file got cleaned or Deleted")
        return 0
        
    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" % self._infectFilePath)
            os.remove(self._infectFilePath)
        except:
            logging.error("Failed to remove the file from filesystem")

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
