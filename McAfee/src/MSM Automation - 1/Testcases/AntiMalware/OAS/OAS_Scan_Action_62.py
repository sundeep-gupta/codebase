#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 11556
# TestcaseDescription: Scanning on write with Primary: Quarantine Secondary: Delete, with Scan files for threats set to All .

import sys
import logging
import time
import subprocess
# Add common folder into the sys path for module importing
sys.path.append("../../Common")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectedFilePath = os.getcwd() + "/data/OASInfect.58"

    def __init__(self):
        logging.info("TestcaseID : 11556")
        logging.info("Scanning on write with Primary: Quarantine Secondary: Delete, with Scan files for threats set to All ")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        CommonOASFns.clearQuarantine()
        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)


        # Setting primary action to 'Qurantain'        
        if CommonOASFns.setAVPrimaryAction('3') == False:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        # Setting secondary action to 'Delete'
        logging.info("Successfully set AV-PrimaryAction.")
            
        if CommonOASFns.setAVSecondaryAction('2') == False:
            logging.error("Unable to set AV-SecondaryAction")
            return 1
        logging.info("Successfully set AV-SecondaryAction.")
        # Enabling 'Read on Scan'.
        if CommonOASFns.enableScanOnRead() == False:
            logging.error("Unable to enable 'Scan On Read'")
            return 1
        logging.info("Successfully enabled 'Scan On Read'")

        time.sleep(3)
        # Creating infected file.
        if CommonOASFns.createInstallCheckInfection(self._infectedFilePath) ==  False:
            logging.error("Unable to create infected file.")
            return 1
        logging.info("Successfully created infected file.")
        time.sleep(10)
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)

        if CommonOASFns.isFileQuarantined(self._infectedFilePath) == True:
            logging.info("Infected file got quarantined. (Secondary Action)")
        else:
            logging.error("Infected File is not Quarantined. (Secondary Action)")
            return 1

        return 0
        

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        if os.path.exists(self._infectedFilePath):
            os.remove(self._infectedFilePath)
                
        # Clean the logs
        commonFns.cleanLogs()
        CommonOASFns.clearQuarantine()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
