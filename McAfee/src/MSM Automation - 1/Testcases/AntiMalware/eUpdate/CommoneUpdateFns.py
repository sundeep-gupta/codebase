# Copyright (C) 2010 McAfee, Inc. All rights reserved
import subprocess
import sys
import os
import logging
import re
import time
sys.path.append('../../Common')
import commonFns
import decimal
QATT_PATH = os.path.abspath((os.path.dirname(os.path.abspath(sys.argv[0])) + '/../data/qatt/QATestTool'))

def _getKey(key):
    try:
        _p = subprocess.Popen([QATT_PATH,'2',key], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if _p is None:
            return False
        _p.wait()
        _out = _p.stderr.read().split('\n')
        _regex = ('\\{contents\\s+=\\s+"%s"\\s*\\}.*\\{contents\\s+=\\s+"(\\d\\d\\d\\d)' % key)
        logging.debug(('REGEX - %s' % _regex))
        for _line in _out:
            logging.debug(_line)
            _match = re.search(_regex, _line)
            if _match is not None:
                _val = _match.group(1).strip()
                logging.debug(('Value for %s is %s' % (key,_val)))
                return _val
        logging.debug(('Key %s not found' % key))
        return 
    except:
        logging.error('getKey : Exception occured while running QATT')
        return 

def getDatVersion():
    _val = _getKey('Update_DATVersion')
    return _val



def startManualUpdate():
    try:
        _cmd = ((QATT_PATH + ' 16') + ' En')
        retval = subprocess.call(['/bin/sh','-c',_cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if retval != 0:
            logging.error('Unable to create the QATT process')
            return False
        return True
    except:
        logging.error('Unable to create the QATT process')
        return False



