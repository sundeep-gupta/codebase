#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 9290
# TestcaseDescription: Check for Archieve scanning.Infected Archieve file wil not be opened

import sys
import logging
import time
import subprocess
import os
import zipfile

# Add common folder into the sys path for module importing
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath = common_path+ "/data/OASArchieveinfect.1"
    def __init__(self):
        logging.info("TestcaseID : 9290")
        logging.info("Description : Check for Archieve Scanning")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.disableOAS() != True:
            logging.error("Unable to enableOAS")
            return 1
        #creating the infected Archieve
        _eicarData = "ZQZXJVBVT"
        _cmd="echo ZQZXJVBVT >>"+self._infectFilePath
        os.system(_cmd)
        try:
            f = zipfile.ZipFile(self._infectFilePath+".zip", 'w')
            f.close()
        except:
            logging.error("Unable to create the Archieve file")
            return 1
        logging.info("Successfully created infected archieve file.")
        if CommonOASFns.enableOAS() != True:
            logging.error("Unable to enableOAS")
            return 1
        if CommonOASFns.enableArchiveScanning()!=True:
	     logging.error("Unable to set AV-PrimaryAction")
             return 1
        logging.info("Successfully created infected archieve file.") 
        return 0
       

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        _cmd = "unzip " + self._infectFilePath+".zip"
        _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        time.sleep(5)
        if _retVal != 0 :
            _regex="Infection found: "+self._infectFilePath+" is infected with  Installation Check, type of infection is Test-Virus"
            if commonFns.searchProductLog(_regex) != True:
                logging.error("Regex is not matching with Notified acction")
                return 1
            logging.info("unzip on file is failed as expected")
            return 0        
        

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
        # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" % self._infectFilePath)
	    filename=self._infectFilePath+".zip"
            os.remove(filename)
        except:
            logging.error("Failed to remove the file from filesystem")
            return 1

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
