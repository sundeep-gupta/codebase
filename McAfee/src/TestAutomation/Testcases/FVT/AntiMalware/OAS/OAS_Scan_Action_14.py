#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 10090
# TestcaseDescription: Read-Only Disk scan: primary action: Clean fails and secodary action :quarantine fails.

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace

# common_path is needed for the independence of the running path;program should run irrespective of current directory


common_path=os.path.dirname(os.path.abspath(sys.argv[0])) + "/../../"
sys.path.append(common_path + "/Common")
sys.path.append(common_path + "/AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):

    _readOnlyInfectedDisk = os.path.abspath(os.path.dirname(os.path.abspath(sys.argv[0]))\
        + "/../data/ReadOnlyInfectedDisk.dmg")

    _infectedFilePath = "/Volumes/tempMount/ReadOnlyEicar"

    def __init__(self):
        logging.info("TestcaseID : 10090")
        logging.info("Read-Only Disk scan: primary action: Clean fails and secodary action :quarantine fails.")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        if CommonOASFns.resetToDefaults() == False:
            logging.error("Unable to reset to 'defaults'.")
            return 1

        if CommonOASFns.clearQuarantine() == False:
            logging.error("Unable to clean Quarantine.")
            return 1

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # Setting primary action to 'clean'        
        if CommonOASFns.setAVPrimaryAction('1') == False:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        # Setting secondary action to 'Quarantine'
        logging.info("Successfully set AV-PrimaryAction.")
            
        if CommonOASFns.setAVSecondaryAction('3') == False:
            logging.error("Unable to set AV-SecondaryAction")
            return 1
        logging.info("Successfully set AV-SecondaryAction.")

        # Enabling 'Scan On Read'.
        if CommonOASFns.enableScanOnRead() == False:
            logging.error("Unable to enable 'Scan On Read'")
            return 1
        logging.info("Successfully enabled 'Scan On Read'")

        if commonFns.mountDMG(self._readOnlyInfectedDisk, "/Volumes/tempMount/") == False:
            logging.error("Not able to mount ReadOnly DMG with infected file.")
            return 1
        logging.info("Successfully mounted DMG with infected file.")     

        time.sleep(2)

        try:    
            fileH = open(self._infectedFilePath, 'r')
            fileH.close()                
        except:
            logging.info("Unable to open infected file.")            

        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(2)
    
        if os.path.exists(self._infectedFilePath):
            logging.info("Infected file not deleted.")
        else:
            logging.error("Infected file got deleted.")
            return 1

        _regex1 = "Infection found: " + self._infectedFilePath + " is infected with  EICAR test file"
        _regex2 = "action taken is Quarantine failed"

        if commonFns.searchProductLog(_regex1) == True:
            logging.info("Expected log found for 'infected file detection'") 
        else:
            logging.error("Expected Log (infected file detection) not found.")
            return 1

        if commonFns.searchProductLog(_regex2) == True:
            logging.info("Expected log found for 'Quarantine Failed'")
        else:
            logging.error("Expected Log (Quarantine failed) not found.")
            return 1

        return 0
        

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        subprocess.call([ "hdiutil",
                          "eject",
                          "/Volumes/tempMount" ],
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
        # Clean the logs
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
