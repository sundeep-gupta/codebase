#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 9256
# TestcaseDescription: File-Close (Modified;Primary Action: NOTIFY): Closing an infected file would be allowed.

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace

# common_path is needed for the independence of the running path; program should run irrespective of current directory
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath = common_path + "/data/OASInfect.2"

    def __init__(self):
        logging.info("TestcaseID : 9256")
        logging.info("File-Close (Modified;Primary Action: NOTIFY): Closing an infected file would be allowed")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        if CommonOASFns.setAVPrimaryAction('0') != True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        logging.info("Successfully set AV-PrimaryAction.")

        if CommonOASFns.enableScanOnRead() !=True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        if CommonOASFns.disableScanOnWrite() !=True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        try:
            fileH = open(self._infectFilePath, 'w')
            fileH.writelines("temprarystring")
        except:
            logging.error("file open failed")
            return False
        
        try:
            fileH = open(self._infectFilePath, 'r+')
            fileH.writelines("ZQZXJVBVT")
            fileH.close()
        except:
            logging.error("file open failed2")
            return False
        time.sleep(5)
        return 0

    def verify(self):
         _retval = subprocess.call(["cat",self._infectFilePath], stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
         if _retval != 0 :
            _regex="Infection found: "+self._infectFilePath+" is infected with  Installation Check, type of infection"\
                +" is Test-Virus\(NOT A VIRUS\), accessed by Python, action taken is Notified"
            if commonFns.searchProductLog(_regex) != True:
                logging.error("Regex is not matching with Notified acction")
                return 1
            logging.info("cat on file is failed as expected")
            return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" % self._infectFilePath)
            os.remove(self._infectFilePath)
        except:
            logging.error("Failed to remove the file from filesystem")
            return 1

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
