#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 11521
# TestcaseDescription: OAS Scan on file/folder with Readonly to group Permissions

import os
import sys
import logging
import time
import subprocess


# Import CommonTest module into current namespace

# common_path is needed for the independence of the running path; program should run irrespective of current directory
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath = common_path + "/data/OASInfect.28"
    _infectFileCopyDir = common_path + "/data/OASInfect_dir.28"

    def __init__(self):
        logging.info("TestcaseID : 11521")
        logging.info("OAS Scan on file/folder with Readonly to group Permissions")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        CommonOASFns.clearQuarantine()

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        if CommonOASFns.disableOAS() != True:
            logging.error("Unable to set diableOAS")
            return 1
        time.sleep(10)

        if CommonOASFns.createInstallCheckInfection(self._infectFilePath) ==  False:
            logging.error("Unable to create infected file.")
            return 1
       
        _cmd = "chmod g+r " + self._infectFilePath 
        subprocess.call(["/bin/sh", "-c",_cmd], stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)

        _cmd = "mkdir " + self._infectFileCopyDir
        subprocess.call(["/bin/sh", "-c", _cmd], stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)

        _cmd = "chmod -R g+r " + self._infectFileCopyDir
        subprocess.call(["/bin/sh", "-c",_cmd], stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
        logging.info("Successfully created infected file.")

        if CommonOASFns.enableOAS() != True:
            logging.error("Unable to set enableOAS")
            return 1

        time.sleep(20)
        _cmd = "cp -Rf " + self._infectFilePath + " " + self._infectFileCopyDir
        subprocess.call(["/bin/sh", "-c",_cmd], stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
        
        return 0

    def verify(self):
        time.sleep(20)
        file_path=self._infectFileCopyDir+"/OASInfect.28"
        if CommonOASFns.isFileQuarantined(file_path) == False :
            logging.error("Unable to Quarntaine the file")
            return 1
        logging.info("file got cleaned or Quarantained")
        return 0
        
    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
        CommonOASFns.clearQuarantine()
        # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" % self._infectFilePath)
            os.rmdir(self._infectFileCopyDir)
            os.remove(self._infectFilePath)
        except:
            logging.error("Failed to remove the file from filesystem")

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
