#!/usr/bin/python
# Copyright (C) 2011 McAfee, Inc.  All rights reserved.
# TestcaseID: 9298
# TestcaseDescription: Scan hardlink of infected file and reporting infection on original file

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath =common_path + "/data/OASInfect.7"
    _infectFileHln  =common_path + "/data/hlnOASInfect.7"

    def __init__(self):
        logging.info("TestcaseID : 9298")
        logging.info("Scan hardlink of infected file and reporting infection on original file")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        # Set Product Preferences to Defaults    
        CommonOASFns.resetToDefaults()
        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # AV-Primary Action   -  Notify 
        if CommonOASFns.setAVPrimaryAction('0') != True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1

        # AV-Secondary Action  - Quarantine
        if CommonOASFns.setAVSecondaryAction('3')!=True:
            logging.error("Unable to set AV-SecondaryAction")
            return 1
 
        if CommonOASFns.enableScanOnRead() !=True:
            logging.error("Unable to enable Scan On Read")
            return 1   
     
        if CommonOASFns.disableScanOnWrite() !=True:
            logging.error("Unable to disable Scan On Write")
            return 1

        #Step 1: Creating an infected file and its hard link    
        time.sleep(5)
        if CommonOASFns.createInstallCheckInfection(self._infectFilePath) ==  False:
            logging.error("Unable to create infected file.")
            return 1
        rt=subprocess.call(["ln",self._infectFilePath,self._infectFileHln])
        if rt!=0:
            logging.error("Unable to create hardlink")
            return 1
        logging.info("Successfully created infected file and its hardlink")

        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        #Step 2: Access the hardlink
        _cmd = "cat " + self._infectFileHln
        _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        time.sleep(5)
        if _retVal != 0 :
            if CommonOASFns.isFileQuarantined(self._infectFilePath)!=True :
                logging.error("Infected file is NOT  Quarantined")
                return 1
           
            if CommonOASFns.isFileQuarantined(self._infectFileHln)!=True:
                logging.error("hardlink is NOT Quarantined")
                return 1

            logging.info("Infected file and its hardlink both Successfully Quarantined")
            return 0
        else:
            return 1

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        #Set Product Prerfernces to Defaults
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()

        # Remove the infected file and its hardlink from the disk
        try :
            logging.debug("Removing the infected file and its hardlink from disk")
            if os.path.exists(self._infectFilePath) :
                os.remove(self._infectFilePath)
            if os.path.exists(self._infectFileHln) :
                os.remove(self._infectFileHln)
        except:
            logging.error("Failed to remove the file or hard link from filesystem")
            return 1

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
