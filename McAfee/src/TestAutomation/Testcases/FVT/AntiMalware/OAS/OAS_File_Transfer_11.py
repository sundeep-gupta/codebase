#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID:9356 
# TestcaseDescription: Through CP files are copied (includes copying directories also) 

import sys
import logging
import time
import subprocess
import os
import shutil

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *
# Get testcase name
testcaseName = sys.argv[0][:-3]
filename=sys.argv[0]
class TestCase(BaseTest):
    _infectFilePath = common_path+ "/data/OASinfect.1"
    def __init__(self):
        logging.info("TestcaseID : 9356")
        logging.info("Description :Through CP command infection files are copied (includes copying directories also)")

    def init(self):
		logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
		_retval = BaseTest.init(self)
		if _retval != 0 :
			return _retval
		logging.debug("Installing AntiMalwareTestTool")
		if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
			logging.error("Failed to install AntiMalwareTestTool")
			return 1
		CommonOASFns.resetToDefaults()
		return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.disableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1
        if os.mkdir(self._infectFilePath)==False :
            logging.error("error in creating directory")
            return 1	
        path=self._infectFilePath+"/OASinfect.1"
        if CommonOASFns.createEicarInfection(path)!=True:
            logging.error("unable to create the Eicar file")
            return 1
        if CommonOASFns.enableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1
        if CommonOASFns.setAVPrimaryAction('1')==False:
            logging.error("Unable to set Primary Action")
            return 1
        if CommonOASFns. setAVSecondaryAction('3')==False:
            logging.error("Unable to se AVS secondary Action")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName) 
        file_path=self._infectFilePath+"/dir/OASinfect.1"
        #copying the directory
        shutil.copytree(self._infectFilePath,self._infectFilePath+"/dir/")
        if CommonOASFns.isFileQuarantined(file_path)==True:
            logging.info("The file is Quarantied")
            return 0
        else :
            logging.error("File is not Quarantied")
            return 1	
		

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
   		# Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" %self._infectFilePath)
            _cmd="rm -r "+self._infectFilePath
            _retVal=subprocess.call(_cmd,shell=True)            
        except :
                logging.error("Failed to remove the file from filesystem")
                return 1
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")
        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
