#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 9269
# TestcaseDescription: copy paste a directory with many subdirectories for All files in a Directory and its sub-directo 

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) 
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *
# Get testcase name
testcaseName = sys.argv[0][:-3]
filename=sys.argv[0]
class TestCase(BaseTest):
    _infectFilePath = common_path+ "/data"
    def __init__(self):
        logging.info("TestcaseID : 9269")
        logging.info("Description : copy paste a directory with many subdirectories for All files in a Directory and its sub-directo")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
	

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        CommonOASFns.clearQuarantine()
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.disableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1
        if CommonOASFns. setAVPrimaryAction('1')==False:
            logging.error("unable to set pv primary action")
            return 1
        if CommonOASFns.setAVSecondaryAction('3')==False:
            logging.error("unable to set sv secondary  action")
            return 1
	    #this script is  to create /dir1/dir2/dir3/dir4 structure

        list1=["dir1","dir2","dir3","dir4"]
        list2=["file1","file2","file3","file4"]
        temppath1=self._infectFilePath
        temppath2=""
        i=0
        for a in list1:
            temppath1 +="/"+a
            temppath2=temppath1+"/"+list2[i]
            _cmd1="mkdir "+temppath1
            i=i+1
            _cmd2="echo ZQZXJVBVT >>"+temppath2
            retval1=subprocess.call(["/bin/sh", "-c", _cmd1],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            retval2=subprocess.call(["/bin/sh", "-c", _cmd2],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            if(retval1!=0 or retval2!=0):
                logging.error("Error in creating Folders and SubFolders")
        logging.info("Successfully Created the directory structure with infected files") 
        if CommonOASFns.enableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName) 
        _cmd="cp -r "+self._infectFilePath+"/dir1/ "+self._infectFilePath+"/dir1/dir"
        _retVal=subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)       
        if _retVal!=0:
            file_path=self._infectFilePath+"/dir1/dir/file1"
            if CommonOASFns.isFileQuarantined(file_path)==True :
                 logging.info("The file is Quarantied")
                 logging.info("error in copy as expected")
                 return 0
	    return 1

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
   	# Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" %self._infectFilePath)
	    _cmd=" sudo rm -r "+self._infectFilePath+"/dir1/ "
	    _retVal=subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)  
            if _retVal!=0:
                logging.info("error in copy as expected")
	        return 1
        except:
            logging.error("Failed to remove the file from filesystem")
            return 1
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")
        

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
