#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 9399
# TestcaseDescription: Scan the locked file

import sys
import logging
import time
import subprocess
import os
import shutil
# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
#import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath = common_path+ "/data/OASInfect.1"

    def __init__(self):
        logging.info("TestcaseID : 9399")
        logging.info("Scan the locked file")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.disableOAS() ==  False:
            logging.error("Unable to disableOAS")
            return 1
        _cmd="echo ZQZXJVBVT >>"+self._infectFilePath
        _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        time.sleep(5)
        if _retVal!=0:
	    logging.error("Unable to create file using ECHO command")
	    return 1
        #Locking a file using chflags
        _cmd="chflags uchg "+self._infectFilePath
        try :
            os.system(_cmd)
        except :
            loogging.error("not able to lock the file")
        if CommonOASFns.enableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1 
	return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        _regex="Infection found: "+self._infectFilePath+" is infected with  Installation Check, type of infection is Test-Virus"
        _regex1="Infection found: "+ self._infectFilePath+".2 is infected with  Installation Check, type of infection is Test-Virus"	
        try :
            shutil.copyfile(self._infectFilePath,self._infectFilePath+".2")
            if commonFns.searchProductLog(_regex) == True or commonFns.searchProductLog(_regex1) == True:
                logging.info("Regex is  matching with Notified acction")
                return 0
            else :
                logging.error("Regex is not matching with Notified action")
            	return 1
        except :
            logging.error("Copy is not Succeded on the file")
            return 1

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" % self._infectFilePath)
            _cmd=" rm  -f  "+self._infectFilePath
            _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE) 
        except:
            logging.error("Failed to remove the file from filesystem")
            return 1

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
