#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 11531
# TestcaseDescription: OAS with Primary:Clean, Secondary: Quarantine ReadWrite & Execute to group

import os
import sys
import logging
import time
import subprocess
import tempfile


# Import CommonTest module into current namespace


# common_path is needed for the independence of the running path; program should run irrespective of current directory
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) + "/../../"
sys.path.append(common_path + "/Common")
sys.path.append(common_path + "/AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):

    def __init__(self):
        logging.info("TestcaseID : 11531")
        logging.info("OAS with Primary:Clean, Secondary: Quarantine ReadWrite & Execute to group")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retvalse

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        # Clear the Quarantine data
        CommonOASFns.clearQuarantine()

        self._url = "http://www.eicar.org/download/eicar.com"

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # Create temporary files for read/write/execute testing...
        self._infectFilePath1 = os.path.realpath(tempfile.mkstemp(prefix="oas_test_")[1])
        self._infectFilePath2 = os.path.realpath(tempfile.mkstemp(prefix="oas_test_")[1])

        for i in self._url.split("/"):
            self._file = i

        self._infectFilePath3 = os.path.realpath("/tmp/"+self._file)

        # Disable OAS temporarily for performing few file operations...
        if CommonOASFns.disableOAS() != True:
            logging.error("Unable to disable OAS")
            return 1
        time.sleep(10)
        # Create infection.  Since the default setting is to scan the files while read, creating file should be successful...
        if CommonOASFns.createInstallCheckInfection(self._infectFilePath1) ==  False:
            logging.error("Unable to create infected file.")
            return 1
        logging.info("Successfully created infected file.")

        # Download the eicar.com file for execute testing...
        if commonFns.downloadFile(self._url, self._infectFilePath3) == False:
            logging.info("Downloading from " + url + " failed")
            return 1
        logging.debug("Downloading eicar.com succeeded")

        # Give read-write permissions to group for temporary files...
        try:
            _cmd = "chmod g+rwx " + self._infectFilePath1
            _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)

            _cmd = "chmod g+rwx " + self._infectFilePath2
            _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            
            _cmd = "chmod g+rwx " + self._infectFilePath3
            _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)

        except:
            return 1

        if CommonOASFns.enableOAS() != True:
            logging.error("Unable to enable OAS")
            return 1

        # Set AV Scan Files Action to Read/Write
        if CommonOASFns.enableScanOnRead() != True:
            logging.error("Unable to enable scan-on-read")
            return 1
        
        # Set AV primary action to Clean
        if CommonOASFns.setAVPrimaryAction('1') != True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        
        logging.debug("successfully set AV-PrimaryAction.")

        # Set AV secondary action to Quarantine
        if CommonOASFns.setAVSecondaryAction('3') != True:
            logging.error("Unable to set AV-SecondaryAction")
            return 1
        
        logging.info("successfully set AV-SecondaryAction.")

        time.sleep(10)

        try:
            # Read the file
            _cmd = "cat " + self._infectFilePath1
            _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)

            # Write the file
            CommonOASFns.createInstallCheckInfection(self._infectFilePath2)

            # Execute the file
            _cmd = self._infectFilePath3
            _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)

        except:
            return 1
        
        return 0


    def verify(self):
        # Check whether the infected files got quarantined properly...
        if os.path.exists(self._infectFilePath1):
            logging.error("Infected file not quarantined which is not expected.")
            return 1

        if CommonOASFns.isFileQuarantined(self._infectFilePath1) != True:
            logging.info("Infected file not quarantined which is not expected.")
            return 1
            
        if os.path.exists(self._infectFilePath2):
            logging.error("Infected file not quarantined which is not expected.")
            return 1

        if CommonOASFns.isFileQuarantined(self._infectFilePath2) != True:
            logging.info("Infected file not quarantined which is not expected.")
            return 1
            
        if os.path.exists(self._infectFilePath3):
            logging.error("Infected file not quarantined which is not expected.")
            return 1

        if CommonOASFns.isFileQuarantined(self._infectFilePath3) != True:
            logging.info("Infected file not quarantined which is not expected.")
            return 1
            
        logging.info("Infected file got quarantined as expected.")
 
        return 0
        

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        CommonOASFns.clearQuarantine()
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
