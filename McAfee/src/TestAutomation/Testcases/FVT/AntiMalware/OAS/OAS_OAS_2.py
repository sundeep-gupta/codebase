#!/usr/bin/python
# Copyright (C) 2011 McAfee, Inc.  All rights reserved.
# TestcaseID: 13239
# TestcaseDescription: To check that the cpu usage by scanners is optimum during toggling between AV & AS

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns

CPU_THRESHOLD   = 5.0
TOGGLE_LIMIT    = 1

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):

    def __init__(self):
        logging.info("TestcaseID : 13239")
        logging.info("To check that the cpu usage by scanners is optimum during toggling between AV & AS")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        time.sleep(5)
        return 0
    
    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        if CommonOASFns.isASEnabled() != True :
            logging.error("Anti-Spyware is not Enabled by default")
            return 1

        return 0
        
    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)

        _cpuUsage1 = commonFns.getCpuUsageByScanners()
        try :
            _pid = os.fork() 

            if _pid > 0 : # Parent process for togggling between AV & AS
                _i = 0
                while _i < TOGGLE_LIMIT :
                    _i = _i + 1
                    _cpuUsage2= commonFns.getCpuUsageByScanners() 
                    if abs(_cpuUsage1 - _cpuUsage2) > CPU_THRESHOLD :
                        logging.error("Consuming too much CPU")
                        # kill the Child Process
                        _killCmd= "kill  -9 " + str(_pid)
                        subprocess.call([_killCmd],shell=True)
                        return 1            
                    # Opening an Application
                    _apCmd="open /Applications/Safari.app"
                    _rt=subprocess.call([_apCmd],shell=True)            
                    if _rt !=0 :
                        logging.error("Application is not launched")
                        return 1
                    time.sleep(5)
                    _apkillCmd = "killall "+ "Safari"
                    _rt=subprocess.call([_apkillCmd],shell=True) 
                # kill the Child Process
                _killCmd= "kill  -9 " + str(_pid)
                subprocess.call([_killCmd],shell=True)
                               
            elif _pid == 0 : # Child process to check CPU usage 
                _i = 0 
                while _i < TOGGLE_LIMIT :  
                    _i = _i + 1 
                    # Disable AS
                    if CommonOASFns.disableAS() != True :
                        logging.error("Unable to disable Anti-Spyware")
                        return 1
                    time.sleep(5) # Parent TURN
                    # Enable AS
                    if CommonOASFns.enableAS() != True :
                        logging.error("Unable to enable Anti-Spyware")
                        return 1
                    time.sleep(5) # Parent TURN

                time.sleep(5)  # Parent turn to kill Child 
        
        except IOError :
            logging.error("Unable to fork")
            return 1

        return 0
           
    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
        # killing the application
        _cmd="killall Safari"
        _rt = subprocess.call([_cmd],shell=True)
        if _rt != 0 :
            logging.error("Unable to close Safari application")      
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass


if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
