#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 9372
# TestcaseDescription: Verify that OAS scan files inside trash.

import sys
import logging
import time
import subprocess
import os
import shutil

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) 
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath1 = common_path  + "/data/OASInfect.1"
    _infectFilePath2= common_path  + "/data/OASInfect.2"
    _home=os.getenv("HOME")
    def __init__(self):
        logging.info("TestcaseID : 9372")
        logging.info("Verify that OAS scan files inside trash.")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.disableOAS() != True:
            logging.error("Unable to disableOAS")
            return 1	
        if CommonOASFns.createEicarInfection(self._infectFilePath1) ==  False:
            logging.error("Unable to create infected file.")
            return 1
		 
        if CommonOASFns.createEicarInfection(self._infectFilePath2) ==  False:
            logging.error("Unable to create infected file.")
            return 1

        logging.info("Successfully created infected file.")
        shutil.move(self._infectFilePath1,self._home+"/.Trash")
        shutil.move(self._infectFilePath2,self._home+"/.Trash")

        if CommonOASFns.enableOAS() != True:
            logging.error("Unable to enableOAS")
            return 1
        if CommonOASFns.enableScanOnRead() == False:
            logging.error("Unable to enable 'Scan On Read'")
            return 1        
	return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        try :
            os.remove(self._home+"/.Trash/OASInfect.1") 
            _regex="Infection found: "+self._infectFilePath1+" is infected with  EICAR test file, type of infection"\
            +" is Test-Virus\(NOT A VIRUS\), accessed by rm, action taken is Notified"
            if commonFns.searchProductLog(_regex) == False:
                logging.info("Regex is not  matching as expected")
            else :
		        return 1
        except :
            logging.error("delete on file is not  succeded not  expected")
            return 1
		#restore the infected file from the Trash
        try :
            shutil.move(self._home+"/.Trash/OASInfect.2",self._infectFilePath2[:-11])
            _regex="Infection found: "+ "~/.Trash/OASInfect.2"+" is infected with  EICAR test file, type of infection"\
                +" is Test-Virus\(NOT A VIRUS\), accessed by mv, action taken is Notified"
            if commonFns.searchProductLog(_regex) != False:
                logging.info("Regex is  matching with Notified acction")
                return 0
        except :
            return 1 
        
    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
        try :
            if os.path.exists(self._infectFilePath2):
                os.remove(self._infectFilePath2)
                logging.info("File sytem removed Successfully")
        except :
            logging.error("file sytem not  removed Successfully")
            return 1 
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
