#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 10096
# TestcaseDescription: Verify that secondary action delete succeeds if primary action quarantine fails.

import os
import sys
import logging
import time
import subprocess


# common_path is needed for the independence of the running path; program should run irrespective of current directory

common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns


# Import CommonTest module into current namespace
from CommonTest import *


# Get testcase name
testcaseName = sys.argv[0][:-3]

# Get the node configuration details to be mounted (details mentioned in mountConfig.xml file)))

details = commonFns.getMountVolumeDetails(common_path + "/../../Common/mountConfig.xml" , "afp")

# Collecting the values in variables

username = details['username']
passwd = details['password']
ip = details['ip']
folder = details['folder']

class TestCase(BaseTest):
    _mountFolder = "/Volumes/afpMount"
    _mountCmd = ["mount_afp", "afp://" + username + ":" + passwd + "@" + ip + folder, _mountFolder]
    _unMountCmd = ["umount", "-f", _mountFolder ]
    _infectedFilePath = _mountFolder + "/OASInfect.20"

    def __init__(self):
        logging.info("TestcaseID : 10096")
        logging.info("Verify that secondary action delete succeeds if primary action quarantine fails.")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        if not os.path.exists(self._mountFolder):
            if os.mkdir(self._mountFolder) == False:
                logging.error("Unable to create mounted folder.")
                return 1

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # Setting primary action to 'Quarantine'        
        if CommonOASFns.setAVPrimaryAction('3') == False:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        # Setting secondary action to 'Delete'
        logging.info("Successfully set AV-PrimaryAction.")
            
        if CommonOASFns.setAVSecondaryAction('2') == False:
            logging.error("Unable to set AV-SecondaryAction")
            return 1
        logging.info("Successfully set AV-SecondaryAction.")
        # Enabling Network Scannning.
        if CommonOASFns.enableNetworkScanning() == False:
            logging.error("Unable to enable network scanning.")
            return 1            

        if CommonOASFns.disableOAS() == False:
            logging.error("Unable to disable OAS.")
            return 1
        time.sleep(10)
        logging.info("Successfully disabled OAS to copy an infected file to network volume.")

        _retVal = subprocess.call(self._mountCmd)
        if _retVal != 0:
            logging.error("Unable to mount network volume.")
            return 1
        logging.info("Successfully mounted network volume.")

        # Creating 'infected file' on Network Volume.
        if CommonOASFns.createEicarInfection(self._infectedFilePath) ==  False:
            logging.error("Unable to create infected file.")
            return 1
        logging.info("Successfully created infected file.")

        if CommonOASFns.enableOAS() == False:
            logging.error("Unable to enable OAS.")
            return 1
        time.sleep(20)
        logging.info("Successfully enable OAS after copying an infected file to network volume.")

        # Enabling 'Read on Scan'.
        if CommonOASFns.enableScanOnRead() == False:
            logging.error("Unable to enable 'Scan On Read'")
            return 1
        logging.info("Successfully enabled 'Scan On Read'")

        time.sleep(10)
        try:    
            fileH = open(self._infectedFilePath, 'r')
            fileH.close()                
        except:
            logging.info("Unable to open infected file.")            

        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        time.sleep(20)
        _regex1 = "Infection found: " + self._infectedFilePath + " is infected with  EICAR test file"
        _regex2 = "action taken is Deleted."     

        if commonFns.searchProductLog(_regex1) == True:
            logging.info("Expected log found for 'infected file detection'") 
        else:
            logging.error("Expected Log (infected file detection) not found.")

        if commonFns.searchProductLog(_regex2) == True:
            logging.info("Expected log found for 'Secondary Action: Delete Failed'")
        else:
            logging.error("Expected Log (Secondary Action: Delete failed) not found.")

        if os.path.exists(self._infectedFilePath):
            logging.error("Infected file not deleted (Unexpected).")
            return 1
        else:
            logging.info("Infected file deleted (as expected).")
        return 0
        

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        time.sleep(2)
        if os.path.exists(self._infectedFilePath):
            os.remove(self._infectedFilePath)
        _retval = subprocess.call(self._unMountCmd)
        if _retval != 0 :
            logging.debug("unmount failed with status : %d" % _retval)

        time.sleep(2)
        if os.path.exists(self._mountFolder):
            os.rmdir(self._mountFolder)

        # Clean the logs
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
