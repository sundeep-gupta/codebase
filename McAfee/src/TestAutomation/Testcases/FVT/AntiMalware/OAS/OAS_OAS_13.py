#!/usr/bin/python
# Copyright (C) 2011 McAfee, Inc.  All rights reserved.
# TestcaseID: 13253
# TestcaseDescription: To write infection repeatedly while OAS is enabled , Machine should not be slowdown

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns

MAX_INFECTIONS     = 100
CPU_THRESHOLD      = 120.0

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath= common_path + "/data/OAS_OAS.13253"
    def __init__(self):
        logging.info("TestcaseID : 13253")
        logging.info("To write infection repeatedly while OAS is enabled , Machine should not be slowdown") 

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        return 0
    
    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # AV-Primary Action     -  Notify
        if CommonOASFns.setAVPrimaryAction('0') != True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        # AV-Secondary Action   -  Delete       
        if CommonOASFns.setAVSecondaryAction('2')!=True:
            logging.error("Unable to set AV-SecondaryAction")
            return 1
 
        if CommonOASFns.enableScanOnWrite() !=True:
            logging.error("Unable to enable Scan On Write")
            return 1   
        logging.info("Successfully set Required actions")       
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
  
        #Writing infection repeatedly and Checking for Machine slow down
        try :
            _pid=os.fork()      
            if _pid > 0 :      # Parent process to check CPU usage   
                _i=0
                while _i < MAX_INFECTIONS :
                    _i = _i+1
                    if commonFns.getCpuUsage() > CPU_THRESHOLD :
                        logging.error("Consuming too much CPU")
                        # kill the Child Process
                        _killCmd= "kill  -9 " + str(_pid)
                        subprocess.call([_killCmd],shell=True)
                        return 1 
                    # We need only one return value at the end So we kill child process 
                    if _i > MAX_INFECTIONS-2 : 
                        _killCmd= "kill  -9 " + str(_pid)
                        subprocess.call([_killCmd],shell=True)
                    time.sleep(2)   

            elif _pid == 0 :    # Child process to Write infected files
                _i=0
                while _i< MAX_INFECTIONS :
                    _i=_i+1
                    _cmd="echo ZQZXJVBVT > " + self._infectFilePath
                    subprocess.call([_cmd],shell=True)                 
                time.sleep(5)   # Giving time to Parent process to  kill child process  
        except IOError :
            logging.error("Unable to fork")
            return 1
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        # Set Product Preferences to Defaults
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass


if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
