#!/usr/bin/python
# Copyright (C) 2011 McAfee, Inc.  All rights reserved.
# TestcaseID: 13242
# TestcaseDescription: Unload ScanManager, Check No of Scanners and verify OAS status

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _scanManagerPlist = "/Library/LaunchDaemons/com.mcafee.ssm.ScanManager.plist"
    _infectFile        = common_path + "/data/infectfile"

    def __init__(self):
        logging.info("TestcaseID : 13242")
        logging.info("Unload ScanManager, Check No of Scanners and verify OAS status")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        
        # Step 1 : unloading the ScanManager   
        _cmd="launchctl unload " + self._scanManagerPlist
        _rt=subprocess.call(_cmd,shell=True)
        if _rt != 0 :
            logging.error("Unable to unload ScanManager")
            return 1
        logging.info("Unloaded ScanManager Successfully")
        time.sleep(5)
        return 0
 
    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)

        #Step 2 : Writing infection file to the disk,it should not be detected
        if CommonOASFns.createInstallCheckInfection(self._infectFile) != True :
            logging.error("Unable to create infected file")
            return 1    
                   
        #Step 3 : Check for the VShieldScanner processes 
        _cmd="ps -ax | grep VShield"
        _retVal=subprocess.Popen(_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True) 
        _resStr=_retVal.communicate()[0]
 
        _vsCount=_resStr.count("VShieldScanner")
        if _vsCount > 1 :
            logging.error("More than one VShiedScanner is Running when OAS disabled")
            return 1
        _vsm=_resStr.count("VShieldScanManager")
        if _vsm != 0 :
            logging.error("VShieldScanManager is Running which is not expected")
            return 1  
        logging.info("No of VShield Scanners and VSManagers running are Correct") 

        if CommonOASFns.isOASEnabled() == True:
            logging.error("OAS Should not be in Enable state ")
        else :  
            logging.info("OAS is disabled which is expected")
        return 0        
            
    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        # Set Product Prefernces to Defaults
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()

        # Load ScanManager 
        _cmd = "launchctl load " + self._scanManagerPlist
        _rt = subprocess.call([_cmd],shell=True)
        if _rt != 0 :
            logging.error("Unable to load ScanManager") 
            return 1
        # Remove infected file
        _cmd = "rm -f " + self._infectFile
        _rt = subprocess.call([_cmd],shell=True)                
        if _rt != 0 :
            logging.error("Unable to remove infected file")
         
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
