#!usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 9304
# TestcaseDescription: File with dots(.) as part of file name and starting with 

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) 
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *
# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath = common_path+ "/data/OASinfectdotname"
    def __init__(self):
        logging.info("TestcaseID : 9304")
        logging.info("Description : File with dots(.) as part of file name and starting with ")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
	
        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.enableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1
        logging.info("Successfully created infected file.")
        if CommonOASFns.enableScanOnRead() !=True:
            logging.error("Unable to enableScanOnWrite")
            return 1       
        if CommonOASFns.enableScanOnWrite() !=True:
            logging.error("Unable to enableScanOnWrite")
            return 1 
        if CommonOASFns.setAVPrimaryAction('1')==False:
            logging.error("Unable to set Primary Action")
            return 1
        if CommonOASFns. setAVSecondaryAction('3')==False:
            logging.error("Unable to set AVS secondary Action")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        #creating files with file.a and .file format

        _cmd="echo ZQZXJVBVT >>"+self._infectFilePath+".a"
        _retVal1 = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        time.sleep(5)
	    
        _cmd="echo ZQZXJVBVT >> "+self._infectFilePath[:-16]+"/.OASinfectdotname"
        _retVal2 = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        time.sleep(5)
        #checking in the Quarantine
        if CommonOASFns.isFileQuarantined(self._infectFilePath+".a") == True:
            logging.info("Infected file got quarantined which is  expected.")
        else :
            logging.error("Infected file not  quarantined ")
            return 1
        time.sleep(10)
        if CommonOASFns.isFileQuarantined(self._infectFilePath+"/.OASinfectdotname") == True:
            logging.info("Infected file got quarantined which is  expected.")
            return 0
        else :
            logging.error("Infected file not  quarantined ")
            return 1

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
   	     # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        logging.debug("Removing %s from disk" % self._infectFilePath)
        if os.path.exists(self._infectFilePath+".a") :
            os.remove(self._infectFilePath+".a")
        if os.path.exists(self._infectFilePath[:-16]+"/.OASinfectdotname") :
            os.remove(self._infectFilePath[:-16]+"/.OASinfectdotname")
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
