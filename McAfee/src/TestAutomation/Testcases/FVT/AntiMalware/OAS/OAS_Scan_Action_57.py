#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 11553
# TestcaseDescription: Scanning on write with Primary: Clean Secondary: Delete, with Scan files for threats set to All the 

import sys
import logging
import time
import subprocess
import os

# Add common folder into the sys path for module importing
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) 
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectFilePath = common_path+ "/data/OASinfect.1"
    def __init__(self):
        logging.info("TestcaseID : 11553")
        logging.info("Description : Scanning on write with Primary: Clean Secondary: Delete, with Scan files for threats set to All the ")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()

        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.disableOAS() != True:
            logging.error("Unable to disableOAS")
            return 1
        if CommonOASFns.enableOAS() != True:
            logging.error("Unable to enableOAS")
            return 1
		
       	if CommonOASFns.enableScanOnRead() ==  False:
            logging.error("Unable to enable ScanOnRead.")
            return 1
        if CommonOASFns.enableScanOnWrite() ==  False:
            logging.error("Unable to enable ScanOnWrite.")
            return 1
        if CommonOASFns.setAVPrimaryAction('1') ==  False:
            logging.error("Unable to set the primary action")
            return 1
        if CommonOASFns.setAVSecondaryAction('2') ==  False:
            logging.error("Unable to set the secondary action.")
            return 1 
        if CommonOASFns.createInstallCheckInfection(self. _infectFilePath ) ==  False:
            logging.error("Unable to set the secondary action.")
            return 1
        logging.info("Successfully created infected archieve file.")
        return 0
       

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        _regex=" Infection found: "+self. _infectFilePath+" is infected with  Installation Check, type of infection is Test-Virus"        
        if commonFns.searchProductLog(_regex) == True:
            logging.info("regex is matching effected file in Installation check got deleted as expected")
            return 0
        else :
            logging.error("regex is not matching")
            return 1
        

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
        # Step 2 : Remove the app from the disk

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
