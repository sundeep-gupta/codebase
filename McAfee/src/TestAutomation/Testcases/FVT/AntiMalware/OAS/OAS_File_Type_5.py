#!/usr/bin/python
# Copyright (C) 2011 McAfee, Inc.  All rights reserved.
# TestcaseID: 9296
# TestcaseDescription: OAS will not detect Encrypted Infected files
 	
import sys
import logging
import os
import subprocess
import time
import shutil

# common_path is needed for the independence of the running path; program should run irrespective of current directory

common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns

# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):

    _infectFilePath = common_path + "/data/OASEncrypt"
    _infectCopyPath = common_path + "/data/copy"
  
    def __init__(self):
        logging.info("TestcaseID : 9296")
        logging.info("Description :OAS will not detect Encrypted Infected files")
	
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        CommonOASFns.resetToDefaults()
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
       
        # Disabling OAS to create an infection
        if not CommonOASFns.disableOAS():
            logging.error("Unable to disable OAS")
            return 1
        logging.info("Successfully disabled OAS")
     
        time.sleep(5)

        # Creating an encrypted infected file
        if not CommonOASFns.createEncryptedInfection(self._infectFilePath):
            logging.error("Unable to create an encrypted infected file")
            return 1
        logging.info("Successfully created an encrypted infected file")
 
        # Enabling OAS
        if not CommonOASFns.enableOAS():
            logging.error("Unable to enable OAS")
            return 1
        logging.info("Successfully enabled OAS")

        time.sleep(5)

        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
       
        # Executing copy command on the encrypted infected file
        shutil.copy(self._infectFilePath, self._infectCopyPath)

        #Now checking whether the file got quarantined
        #A true should fail the test
        
        if CommonOASFns.isFileQuarantined(self._infectFilePath):
            logging.error("An encrypted file got detected")
            return 1
        
        logging.info("An encrypted file is not detected by OAS : which is expected")
        

        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        commonFns.cleanLogs()
        # Clear the quarantine
        CommonOASFns.clearQuarantine()     
        CommonOASFns.resetToDefaults()        
       
        # Removing the infected files if it exists

        if os.path.exists(self._infectFilePath):
            os.remove(self._infectFilePath)
        if os.path.exists(self._infectCopyPath):
            os.remove(self._infectCopyPath)
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
