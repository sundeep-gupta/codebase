#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 9297
# TestcaseDescription: Non-infected file (note the file attributes, time stamping, permissions...) 

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) 
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *
# Get testcase name
testcaseName = sys.argv[0][:-3]
filename=sys.argv[0]
class TestCase(BaseTest):
    _infectFilePath = common_path+ "/data/"
    def __init__(self):
        logging.info("TestcaseID : 9297")
        logging.info("Description : Non-infected file (note the file attributes, time stamping, permissions...)")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
	

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.enableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1

        logging.info("Successfully created infected file.")
        if CommonOASFns.enableScanOnRead() !=True:
			logging.error("Unable to enableScanOnWrite")
			return 1       
        if CommonOASFns.enableScanOnWrite() !=True:
            logging.error("Unable to enableScanOnWrite")
            return 1 
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        atrbt_file=subprocess.Popen(['stat -f %a ',testcaseName ], stdout = subprocess.PIPE,shell=True)
        atrbt1_file=atrbt_file.stdout.readline()
        _cmd="cp "+filename +" "+self._infectFilePath
        _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)	
        time.sleep(5)
        if _retVal != 0 :
            logging.error("unable to copy")    
        #checking the file attributes like no.of links,time stamps,sizes,file permitions
	
        filepath=self._infectFilePath+"OAS_File_Type_6.py"
        attrbute=subprocess.Popen(['stat -f %a',filepath ], stdout = subprocess.PIPE,shell=True)
        atrbt2=attrbute.stdout.readline()
        
        if atrbt1_file!=atrbt2:
            logging.error("file1 has modified")
            return 1	 
        #checking the time stamps of file  
        _cmd="stat "+filename+"|awk '{print$9$10$11$12}'"
        timetemp1=subprocess.Popen([_cmd ], stdout = subprocess.PIPE,shell=True)
        time1=timetemp1.stdout.readline() 
	
        _cmd="stat "+filepath+"|awk '{print$9$10$11$12}'"
        timetemp2=subprocess.Popen([_cmd ], stdout = subprocess.PIPE,shell=True) 
        time2=timetemp2.stdout.readline()
        if time1 ==time2 :
            logging.error("files are aceessed same time")
            return 1
        #checking the whether file permissions got changed or not 
        _cmd="stat "+filename+"|awk '{print$3}'"
        permtemp1=subprocess.Popen([_cmd ], stdout = subprocess.PIPE,shell=True)
        perm1=permtemp1.stdout.readline()
      
        _cmd="stat "+filepath+"|awk '{print$3}'"
        permtemp2=subprocess.Popen([_cmd ], stdout = subprocess.PIPE,shell=True)
        perm2=permtemp2.stdout.readline()
        
        if perm1 !=perm2 :
            logging.error("file3 has modified")
            return 1

        #checking the sizeis  of the both files
        _cmd="stat "+filename+"|awk '{print$8}'"
        sizetemp1=subprocess.Popen([_cmd ], stdout = subprocess.PIPE,shell=True)
        size1=permtemp1.stdout.readline()

        _cmd="stat "+filepath+"|awk '{print$8}'"
        sizetemp2=subprocess.Popen([_cmd ], stdout = subprocess.PIPE,shell=True)
        size2=timetemp2.stdout.readline()
        if size1 !=size2 :
            logging.error("file4 has modified")
            return 1
        logging.info("File attributes are SuccessFully comapred")
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
   		# Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        try :
            logging.debug("Removing %s from disk" % self._infectFilePath)
            _path=self._infectFilePath+"OAS_File_Type_6.py"
            os.remove(_path)
        except:
            logging.error("Failed to remove the file from filesystem")
            return 1
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")
            return 1
        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
