#!/usr/bin/python
# Copyright (C) 2011 McAfee, Inc.  All rights reserved.
# TestcaseID: 13238
# TestcaseDescription: To verify that McAfeeSecurity.log file capture the detected infection information

import sys
import logging
import time
import subprocess
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns

# Import CommonTest module into current namespace
from CommonTest import *

MAX_LIMIT = 100

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectDirPath   = common_path + "/data/OAStestEicar"
    _infectFilePath  = common_path + "/data/OAStestEicar/OASInfect."

    def __init__(self):
        logging.info("TestcaseID : 13238")
        logging.info("To verify that McAfeeSecurity.log file capture the detected infection information")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # AV-Primary Action     - Notify
        if CommonOASFns.setAVPrimaryAction('0') != True:
            logging.error("Unable to set AV-PrimaryAction")
            return 1

        if CommonOASFns.enableScanOnRead() !=True:
            logging.error("Unable to enable Scan On Read")
            return 1   
     
        if CommonOASFns.disableScanOnWrite() !=True:
            logging.error("Unable to disable Scan On Write")
            return 1

        time.sleep(5)
        #Step 1: Creating large number of infected files     
        os.mkdir(self._infectDirPath)
        _i=0
        while _i < MAX_LIMIT :
            _i=_i+1
            if CommonOASFns.createEicarInfection(self._infectFilePath+str(_i)) ==  False:
                logging.error("Unable to create infected file.")
                return 1

        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)
        #Step 2: Accessing the all infected file and verifying the McAfeeSecurity.log
        _i=0
        while _i < MAX_LIMIT :
            _i=_i+1
            _cmd = "cat " + self._infectFilePath+str(_i)
            _retVal = subprocess.call(["/bin/sh", "-c", _cmd],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            #time.sleep(5)
            if _retVal != 0 :
                _regex="Infection found: "+self._infectFilePath+str(_i)+" is infected with  EICAR test file, type of infection"\
                +" is Test-Virus\(NOT A VIRUS\), accessed by cat, action taken is Notified"
                if commonFns.searchProductLog(_regex) != True:
                    logging.error("Regex is not matching with Notified acction")
                    return 1
        logging.info("All infections all Successfully notified in McAfeeSecurity.log")
        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        # Set Product Prefernces to Defaults
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()

        # Remove the all infected files(directory) from the disk
        logging.debug("Removing %s from disk" % self._infectDirPath)

        _cmd="rm -rf "+ self._infectDirPath
        _rt=subprocess.call([_cmd],shell=True)
        if _rt != 0 :
            logging.error("Failed to remove %s from filesystem"%self._infectDirPath)
            return 1

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
