#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID:9347 
# TestcaseDescription: Console copy directory/file using mv 

import sys
import logging
import time
import subprocess
import os
import shutil

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")
import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *
# Get testcase name
testcaseName = sys.argv[0][:-3]
filename=sys.argv[0]
class TestCase(BaseTest):
    _infectFilePath = common_path + "/data/OASinfect.7"
    def __init__(self):
        logging.info("TestcaseID : 9347")
        logging.info("Description :Console copy directory/file using mv")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
	

	logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        CommonOASFns.resetToDefaults()
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)
        if CommonOASFns.disableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1
        if os.mkdir(self._infectFilePath)==False :
            logging.error("error in creating directory")
        #creating infected file 
        _path=self._infectFilePath+"/OASinfect"
        if CommonOASFns.createEicarInfection(_path)!=True:
            logging.error("unable to create the Eicar file")
            return 1
        if CommonOASFns.enableOAS() ==  False:
            logging.error("Unable to enableOAS")
            return 1
        if CommonOASFns.enableScanOnRead() ==  False:
            logging.error("Unable to 'enableScanOnRead'")
            return 1
        if CommonOASFns.enableScanOnWrite() ==  False:
            logging.error("Unable to 'enableScanOnWrite'")
            return 1
        if CommonOASFns.setAVPrimaryAction('1')==False:
            logging.error("Unable to set Primary Action")
            return 1
        if CommonOASFns. setAVSecondaryAction('3')==False:
            logging.error("Unable to set AVS secondary Action")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName) 
        shutil.move(self._infectFilePath,self._infectFilePath[:-11]+"dir")
        #Verifying the file is Quarantied or not
        if CommonOASFns.isFileQuarantined(self._infectFilePath+"/OASinfect")==True:
            logging.info("The file is Quarantied as expected ")
            return 0
        else :
	        logging.error("File is not Quarantied which is not expected")
	        return 1
		

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
   		# Copy logs and clean them.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
         # Step 2 : Remove the app from the disk
        try :
            shutil.rmtree(self._infectFilePath)
            if os.path.exists(self._infectFilePath[:-11]+"dir"):
                os.system("rm -r "+self._infectFilePath[:-11]+"dir")
                logging.info("%s",self._infectFilePath[:-11])
                shutil.rmtree(self._infectFilePath[:-11]+"dir/")		
        except:
            logging.error("Failed to remove the file from filesystem")
            return 1
        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")
        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
