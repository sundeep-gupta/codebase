#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 11561
# TestcaseDescription: Scanning on write with Primary: Quarantine Secondary: Delete, with Scan files while set to Write.

import os
import sys
import logging
import time
import subprocess


# Import CommonTest module into current namespace

# common_path is needed for the independence of the running path; program should run irrespective of current directory
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    _infectedFilePath = common_path + "/data/OASInfect.67"

    def __init__(self):
        logging.info("TestcaseID : 11561")
        logging.info("Scanning on write with Primary: Quarantine Secondary: Delete, with Scan files while set to Write")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        if CommonOASFns.resetToDefaults() == False:
            logging.error("Unable to reset to 'defaults'.")
            return 1

        if CommonOASFns.clearQuarantine() == False:
            logging.error("Unable to clean Quarantine.")
            return 1

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)


        # Setting primary action to 'Quarantine'        
        if CommonOASFns.setAVPrimaryAction('3') == False:
            logging.error("Unable to set AV-PrimaryAction")
            return 1
        # Setting secondary action to 'Delete'
        logging.info("Successfully set AV-PrimaryAction.")
            
        if CommonOASFns.setAVSecondaryAction('2') == False:
            logging.error("Unable to set AV-SecondaryAction")
            return 1
        logging.info("Successfully set AV-SecondaryAction.")
        # Enabling 'Scan on write'.
        if CommonOASFns.enableScanOnWrite() == False:
            logging.error("Unable to enable 'Scan on write'")
            return 1
        logging.info("Successfully enabled 'Scan On Write'")

        # Creating Install Check.
        if CommonOASFns.createInstallCheckInfection(self._infectedFilePath) ==  False:
            logging.error("Unable to create Install Check.")
            return 1
        logging.info("Successfully created Install Check.")

        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)

        if CommonOASFns.isFileQuarantined(self._infectedFilePath) == True:
            logging.info("Infected file got quarantined. (Primary Action)")
        else:
            logging.error("Infected File is not Quarantined. (Primary Action)")
            return 1

        if os.path.exists(self._infectedFilePath):
            logging.error("Infected file not deleted.")
            return 1
        else:
            logging.info("Infected file got deleted.")

        return 0
        

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        if os.path.exists(self._infectedFilePath):
            os.remove(self._infectedFilePath)
                
        # Clean the logs
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
