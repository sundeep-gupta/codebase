#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 11545
# TestcaseDescription: Scanning on read & write with Primary: Quarantine Secondary: Delete Readwrite to others

import sys
import logging
import time
import subprocess
import os
import re
import stat

# Import CommonTest module into current namespace

# common_path is needed for the independence of the running path; program should run irrespective of current directory
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) + "/../../"
sys.path.append(common_path + "/Common")
sys.path.append(common_path + "/AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *


# Get testcase name

script_path = sys.argv[0][:-3]

testcaseName = os.path.basename(script_path)

class TestCase(BaseTest):
    def __init__(self):
        logging.info("TestcaseID : 11545")
        logging.info("Description : Scanning on read & write with Primary: Quarantine Secondary: Delete Readwrite to others")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval
        self._infectionFilePath = "/private/tmp/" + testcaseName
        self._dummyFile = "/private/tmp/" + testcaseName + ".write"
        self._userName  = "soumya"
        
        if not commonFns.userExists(self._userName) :
            logging.error("User " + self._userName + " which is required to run the testscript not found")
            return 1

        logging.debug("Installing AntiMalwareTestTool")
        if not CommonAntiMalwareFns.installAntiMalwareTestTool() :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        if self._cleanup() == 1 :
            logging.error("Failed performing init cleanup")
            return 1
        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # Disable OAS temporarily for performing few file operations...
        logging.debug("Disabling OAS to write test data")
        if not CommonOASFns.disableOAS() :
            logging.error("Unable to disable OAS")
            return 1
        time.sleep(10)
        # Create infection file...
        logging.debug("Creating the infection file to read %s" % self._infectionFilePath)
        if not CommonOASFns.createInstallCheckInfection(self._infectionFilePath):
            logging.error("Unable to create infected file.")
            return 1

        logging.debug("Creating dummy file to write infection")
        _fh = open(self._dummyFile, "w")
        _fh.write("hello")
        _fh.close()

        # Give read permission to others for temporary file...
        try:
               
            logging.info("Giving rw permissions to others for both the files")
            os.chmod(self._infectionFilePath , stat.S_IROTH | stat.S_IWOTH )
            os.chmod(self._dummyFile , stat.S_IROTH | stat.S_IWOTH )

        except:
            logging.error("Exception occured while doing chmod")
            return 1

        # Set the AV Preferences now
        logging.debug("Checking if OAS is enabled")
        if not CommonOASFns.isOASEnabled() :
            logging.debug("Starting OAS")
            if not CommonOASFns.enableOAS() :
                logging.error("Failed to start OAS")
                return 1

        time.sleep(20)
        logging.debug("Enable scan on read/write")
        if not CommonOASFns.enableScanOnRead() :
            logging.error("Failed to enable scanning for read")
            return 1
        if not CommonOASFns.enableScanOnWrite() :
            logging.error("Failed to enable scanning for write")
            return 1

        logging.debug("Setting AV Primary Action to Quarantine")
        if not CommonOASFns.setAVPrimaryAction('3') :
            logging.error("Failed to set primary Action")
            return 1
        time.sleep(5)

        logging.debug("Setting AV Secondary Action to Delete")
        if not CommonOASFns.setAVSecondaryAction('2') :
            logging.error("Failed to set secondary action")
            return 1
        time.sleep(5)

        # CASE 1 : Read the file
        try :
            # Read the file in other user context...
            logging.debug("Reading the file as user %s" % self._userName)
            _cmd = "sudo -u " + self._userName + " sh -c \"cat " + self._infectionFilePath + "\""
            subprocess.call(["sh", "-c", _cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except :
            logging.error("Exception occured while reading as other user")
            return 1

        time.sleep(5)
        try :
            logging.debug("Writing infection as user %s" % self._userName)
            _cmd = "sudo -u " + self._userName + " sh -c \"echo ZQZXJVBVT >" + self._dummyFile +"\""
            subprocess.call(["sh", "-c", _cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except :
            logging.error("Exception occured while writing file")
            return 1
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)

        time.sleep(20)
        logging.debug("Check Primary Action : Quarantine")
        if CommonOASFns.isFileQuarantined(os.path.realpath(self._infectionFilePath)):
            logging.debug("File is Quarantined")
        elif not os.path.exists(self._infectionFilePath) :
            logging.debug("Secondary Action successful : File is Deleted")
        else :
            logging.error("Neither primary action nor secondary occured")
            return 1

        if CommonOASFns.isFileQuarantined(os.path.realpath(self._dummyFile)):
            logging.debug("File is Quarantined")
            return 0
        elif not os.path.exists(self._dummyFile) :
            logging.debug("Secondary Action successful : File is Quarantined")
            return 0
        else :
            logging.error("Neither primary action nor secondary occured")
            return 1

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        self._cleanup()
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def _cleanup(self):
        _retval = 0
        logging.debug("Clearing the Quarantine")
        if CommonOASFns.clearQuarantine() == False :
            _retval = 1

        logging.debug("Resetting OAS settings to factory defaults")
        if CommonOASFns.resetToDefaults() == False :
            _retval = 1

        logging.debug("Enabling OAS")
        if not CommonOASFns.enableOAS():
            _retval = 1
        time.sleep(20)

        if os.path.exists(self._infectionFilePath) :
            logging.debug("removing %s" % self._infectionFilePath)
            os.remove(self._infectionFilePath)
        if os.path.exists(self._dummyFile) :
            logging.debug("removing %s" % self._dummyFile)
            os.remove(self._dummyFile)

        return _retval

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
