# Copyright (C) 2010 McAfee, Inc. All rights reserved
import subprocess
import sys
import os
import logging
import re
import time
import decimal

# Add parent folder into the sys path for module importing
sys.path.append("../")
import CommonAntiMalwareFns

QATT_PATH = os.path.abspath(os.path.dirname(os.path.abspath(sys.argv[0])) + "/../data/qatt/QATestTool")

OAS_EXCLUSION_LIST       = "OAS_Exclusion_List"
AV_PRIMARY_ACTION        = "OAS_AV_ScannerPrimaryAction"
AV_SECONDARY_ACTION      = "OAS_AV_ScannerSecondaryAction"
SPYWARE_PRIMARY_ACTION   = "OAS_Spyware_ScannerPrimaryAction"
SPYWARE_SECONDARY_ACTION = "OAS_Spyware_ScannerSecondaryAction"
SCAN_ON_READ             = "OAS_ScanOnRead"
SCAN_NETWORK             = "OAS_ScanNetwork"
SCAN_ARCHIVE             = "OAS_ScanArchive"
SCAN_TIMEOUT             = "OAS_ScanTimeout"
SCAN_MAIL                = "OAS_ScanMail"
SCAN_ON_WRITE            = "OAS_ScanOnWrite"

def enableOAS():
    """
    Enable On-Access-Scan
    RETURN : True on success, False otherwise
    """
    return CommonAntiMalwareFns.enableOAS()

def disableOAS():
    """
    Disable On-Access-Scan
    RETURN : True on success, False otherwise
    """
    return CommonAntiMalwareFns.disableOAS()

def isOASEnabled():
    """
    Return the status of the On-Access-Scan
    RETURN : True if OAS is enabled, False otherwise
    """
    return CommonAntiMalwareFns.isOASEnabled()

# Fn to enable Anti-Spyware Option in product general preferences
def enableAS():
    """
    Enable Anti-Spyware
    RETURN : True on success, False otherwise
    """
    return CommonAntiMalwareFns.enableAS()

# Fn to disable Anti-Spyware Option in product general preferences
def disableAS():
    """
    Disable Anti-Spyware
    RETURN : True on success, False otherwise
    """
    return CommonAntiMalwareFns.disableAS()

# Fn to check Anti-Spyware Option is enabled or not
def isASEnabled():
    """
    Return the status of the Anti-Spyware
    RETURN : True if AS is enabled, False otherwise
    """
    return CommonAntiMalwareFns.isASEnabled()

def createEicarInfection(file):
    return CommonAntiMalwareFns.createEicarInfection(file)

def createInstallCheckInfection(file):
    return CommonAntiMalwareFns.createInstallCheckInfection(file)

def createEncryptedInfection(file):
    return CommonAntiMalwareFns.createEncryptedInfection(file)

def resetToDefaults():
    """
    Resets the Scanner to default factory settings.
    NOTE: All OAS, ODS and Exclusions are set to factory settings.
    RETURN : True on success, False otherwise
    """
    return CommonAntiMalwareFns.resetToDefaults()

def enableArchiveScanning():
    """
    Enables the scanning of archive files.
    RETURN : True on success, False Otherwise.
    """
    return _setKey(SCAN_ARCHIVE, '1')

def disableArchiveScanning():
    """
    Disables the scanning of archive files.
    RETURN : True on success, False Otherwise.
    """
    return _setKey(SCAN_ARCHIVE,'0')

def isArchiveScanningEnabled():
    """
    Return True if archive scanning is enabled. False otherwise.
    """
    return _getKey(SCAN_ARCHIVE) in ["true"]

def enableMailScanning():
    """
    Enables the Apple Mail scanning.
    RETURN : True on success, false otherwise.
    """
    return _setKey(SCAN_MAIL,'1')

def disableMailScanning():
    """
    Disables the Apple Mail Scanning.
    RETURN : True on succwss. False otherwise.
    """
    return _setKey(SCAN_MAIL,'0')

def isMailScanningEnabled():
    """
    Return True if Apple-Mail scanning is enabled. False otherwise.
    """
    return _getKey(SCAN_MAIL) in ["true"]

def enableNetworkScanning():
    """
    Enables Network Scanning for OAS
    RETURN : True on success. False otherwise.
    """
    return _setKey(SCAN_NETWORK,'1')

def disableNetworkScanning():
    """
    Disables network scanning for OAS
    RETURN : True on success. False Otherwise.
    """
    return _setKey(SCAN_NETWORK,'0')

def isNetworkScanningEnabled():
    """
    Return True if network scanning is enabled. false otherwise.
    """
    return _getKey(SCAN_NETWORK) in ["true"]

def getAVPrimaryAction():
    """
    Returns the AV's Primary Action.
    RETURN : '1' - for Clean
             '2' - for delete
             '3' - for Quarantine
             '0' - for notify
             None if failed to find the action.
    NOTE: Return is a string and not integer
    """
    return _getKey(AV_PRIMARY_ACTION)

def setAVPrimaryAction(val):
    """
    Sets the primary action of the AV.
    PARAM : string with values :
            '1' - Clean
            '2' - Delete
            '3' - Quarantine
            '0' - Notify
    RETURN : True for success. False otherwise
    """
    if not isinstance(val,str) or val not in ['1','2','3','0']:
        logging.error("setAVPrimaryAction : Argument 'val' must be string")
        return False

    if val == '2':
        _setKey(AV_SECONDARY_ACTION, '0')
    elif val == '0':
        _setKey(AV_SECONDARY_ACTION, '0')
        
    return _setKey(AV_PRIMARY_ACTION, val);

def getAVSecondaryAction():
    """
    Returns the AV's secondary action
    RETURN : '0' - Notify
             '1' - Clean
             '2' - Delete
             '3' - Quarantine
    """
    return _getKey(AV_SECONDARY_ACTION)

def setAVSecondaryAction(val):
    """
    Sets the secondary action of the AV.
    PARAM : string with values :
            '0' - Notify
            '1' - Clean
            '2' - Delete
            '3' - Quarantine
    RETURN : True for success. False otherwise
    """
    if not isinstance(val,str) or val not in ['0','1','2','3']:
        logging.error("setAVSecondaryAction : Argument 'val' must be string")
        return False
    return _setKey(AV_SECONDARY_ACTION, val)

def getSpywarePrimaryAction():
    """
    Returns the Spyware's Primary Action.
    RETURN : '1' - for Clean
             '2' - for Delete
             '3' - for Quarantine
             '0' - for notify
             None if failed to find the action.
    NOTE: Return is a string and not integer
    """
    return _getKey(SPYWARE_PRIMARY_ACTION)

def getSpywareSecondaryAction():
    """
    Returns the AV's secondary action
    RETURN : '1' - Clean
             '2' - Delete
             '3' - Quarantine
             '0' - Notify
    """
    return _getKey(SPYWARE_SECONDARY_ACTION)

def setSpywarePrimaryAction(val):
    """
    Sets the primary action of the Spyware.
    PARAM : string with values :
            '1' - Clean
            '2' - Quarantine
            '3' - Delete
            '0' - Notify
    RETURN : True for success. False otherwise
    """
    if not isinstance(val,str) or val not in ['1','2','3','0']:
        logging.error("setSpywarePrimaryAction : Argument 'val' must be string")
        return False

    if val == '2':
        _setKey(SPYWARE_SECONDARY_ACTION, '0')
    elif val == '0':
        _setKey(SPYWARE_SECONDARY_ACTION, '0')
        
    return _setKey(SPYWARE_PRIMARY_ACTION,val)

def setSpywareSecondaryAction(val):
    """
    Sets the secondary action of the Spyware.
    PARAM : string with values :
            '1' - Clean
            '2' - Quarantine
            '3' - Delete
            '0' - Notify
    RETURN : True for success. False otherwise
    """
    if not isinstance(val,str) or val not in ['0','1','2','3']:
        logging.error("setSpywareSecondaryAction : Argument 'val' must be string")
        return False

    return _setKey(SPYWARE_SECONDARY_ACTION, val)

def setOASTimeout(val):
    """
    Sets the timeout per file for oas.
    PARAM : String containing the timout value.
            value must be >= 10 and <= 999
    RETURN : True on success. False otherwise.
    """
    if not isinstance(val,str) or int(val) < 10 or int(val) > 999 :
        logging.error("setOASTimeout : Invalid timeout value")
        return False

    return _setKey(SCAN_TIMEOUT,val)

def getOASTimeout():
    """
    Returns the timeout value of the OAS
    RETURN : string representing the timeout value.
    """
    return _getKey(SCAN_TIMEOUT)

def enableScanOnRead():
    """
    Enables the scanning on read
    RETURN : True on success. False otherwise.
    """
    return _setKey(SCAN_ON_READ,'1')

def disableScanOnRead():
    """
    Dissbles the scanning on read
    RETURN : True on success. False otherwise.
    """
    return _setKey(SCAN_ON_READ, '0')

def isScanOnReadEnabled():
    """
    Returns True if scanning on read is enabled. False otherwise
    """
    return _getKey(SCAN_ON_WRITE) in ['1']

def enableScanOnWrite():
    """
    Enables the scanning on write
    RETURN : True on success. False otherwise.
    """
    return _setKey(SCAN_ON_WRITE, '1')

def disableScanOnWrite():
    """
    Dissbles the scanning on write
    RETURN : True on success. False otherwise.
    """
    return _setKey(SCAN_ON_WRITE, '0')

def isScanOnWriteEnabled():
    """
    Returns True if scanning on write is enabled. False otherwise
    """
    return _getKey(SCAN_ON_WRITE) in ['1']

def addOASExclusion(exclusion):
    """
    Adds the given exclusion to OAS exclusion list.
    If the exclusion path already exist, it return True without doing anything.
    PARAM : string containing the path of exclusion.
    RETURN : True for success and false otherwise.
    """
    if not isinstance(exclusion, str) :
        logging.error("addOASExclusion : parameter exclusion must be a string")
        return False
    _exclusions = getOASExclusions()
    # if already present :
    if exclusion in _exclusions  :
        return True
    _exclusions.append(exclusion)
    return setOASExclusions(_exclusions)

def setOASExclusions(exclusions):
    """
    Sets the OAS exclusion list.
    PARAM : list of string containing the exclusions to be set.
    RETURN : True on success. False otherwise.
    """
    if not isinstance(exclusions,list) :
        logging.error("setOASExclusions : parameter exclusions must be a list")
        return False
    for _e in exclusions :
        if not isinstance(_e, str) :
            logging.error("setOASExclusions: element of list must be a string")
            return False

    _exclusions = ""
    for _exclusion in exclusions :
        if len(_exclusions) == 0:
            _exclusions = _exclusion
        else:
            _exclusions = _exclusions + " " + _exclusion + " "
    return _setKey(OAS_EXCLUSION_LIST, _exclusions)

def deleteOASExclusion(exclusion):
    """
    Delete the given OAS exclusion.
    PARAM : string containing exclusion to remove.
    RETURN : True for success. False otherwise

    """
    if not isinstance(exclusion) :
        logging.error("deleteOASExclusion : parameter 'exclusion' must be string")

    _exclusions = getOASExclusions()
    if exclusion not in _exclusions :
        logging.debug("deleteOASExclusion : %s not found in exclusion list" % exclusion)
        return False
    for _exclusion in _exclusions :
        if _exclusion != exclusion :
            _str_exclusions = _str_exclusions + " '" + _exclusion +"'"
    return _setKey(OAS_EXCLUSION_LIST, _exclusions)

def getOASExclusions():
    """
    Returns the OAS exclusion list.
    RETURN : list of strings containing exclusions
             None on failure
    """
    try :
        _p = subprocess.Popen([QATT_PATH, "2", OAS_EXCLUSION_LIST],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if _p is None :
            logging.error("Unable to create the QATT process")
            return None
        # Wait till process complete.
        _p.wait()

        # Read the output and parse it.
        _out = _p.stderr.read().split("\n")
        _regex = "\{contents\s+=\s+\"(.*)\"\s*\}"
        _exclusions = []
        for _line in _out :
            _match = re.search(_regex, _line)
            if _match is not None and _match.group(1) != OAS_EXCLUSION_LIST :
                _exclusions.append(_match.group(1))

        return _exclusions
    except :
        logging.error("getOASExclusions : Failed with exception")
    return None

def clearQuarantine():
    """
    Clears the quarantine
    RETURN : True if successfully cleared. False otherwise
    """
    return CommonAntiMalwareFns.clearQuarantine()

def isFileQuarantined(file_path):
    """
    Checks if the file is quarantined or not
    RETURN : True if file is Quarantined and False Otherwise
    """
    return CommonAntiMalwareFns.isFileQuarantined(file_path)

def _getKey(key):
    return CommonAntiMalwareFns.getKey(key)

def _setKey(key,value):
    return CommonAntiMalwareFns.setKey(key,value)

def getMD5ForFile(file):
    return CommonAntiMalwareFns.getMD5ForFile(file)


