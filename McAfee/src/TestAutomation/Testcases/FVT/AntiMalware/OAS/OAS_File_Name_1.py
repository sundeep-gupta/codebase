#!/usr/bin/python
# Copyright (C) 2011 McAfee, Inc.  All rights reserved.
# TestcaseID: 9388
# TestcaseDescription:  OAS should scan a file with a long filename (255 chars)

import sys
import logging
import subprocess
import os
import time

# Import CommonTest module into current namespace

# common_path is needed for the independence of the running path; program should run irrespective of current directory
common_path=os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(common_path + "/../../Common")
sys.path.append(common_path + "/../../AntiMalware")

import commonFns
import CommonOASFns
import CommonAntiMalwareFns
# Import CommonTest module into current namespace
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):
    
    _infectFilePath = common_path + "/data/"
   
 
    def __init__(self):
        logging.info("TestcaseID : 9388")
        logging.info("OAS should scan a file with a long filename (255 chars)")
        logging.info("Primary Action : Clean, Secondary Action: Quarantine ")
    
    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)
        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval


        logging.debug("Installing AntiMalwareTestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install AntiMalwareTestTool")
            return 1

        if CommonOASFns.resetToDefaults() == False:
            logging.error("Unable to reset to 'defaults'.")
            return 1

        return 0

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # getting 255 characters in a string and using the string as the filename

        _filename = ""
	
        for i in range(1,256):
            _filename = _filename + 'a'

        # Now the path of the file is updated with the 255 characters long filename
        self._infectFilePath = self._infectFilePath + _filename

        # Writing the Install Check Infection into the file
        _cmd2 = "echo " + "ZQZXJVBVT" + "> " + self._infectFilePath
        subprocess.call([_cmd2],stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
       
        return 0

    def verify(self):
        logging.info("Verifying testcase %s" % testcaseName)

        if CommonOASFns.isFileQuarantined(self._infectFilePath) != True:
            logging.error("Did not scan the infected file")
            return 1
        logging.info("Scanned and Quarantined an infected file with a long filename (255 chars) : which is expected")

        return 0

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonOASFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()
        # Clean the Quarantine
        CommonOASFns.clearQuarantine()
        # Step 2 : Remove the infected file from the disk
        try :
            logging.debug("Removing %s from disk" % self._infectFilePath)
            if os.path.exists(self._infectFilePath):
                os.remove(self._infectFilePath)
     
        except:
            logging.error("Failed to remove the file from filesystem")
            return 1

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash
        

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...    
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal = testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"
        
    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
