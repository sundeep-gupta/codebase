#!/usr/bin/python
# Copyright (C) 2010 McAfee, Inc.  All rights reserved.
# TestcaseID: 18055 
# TestcaseDescription:Quarantine succeeds for ODS

import sys
import logging
import time
import subprocess
import tempfile
import os

# Import CommonTest module into current namespace
common_path=os.path.dirname(os.path.abspath(sys.argv[0])) + "/../../"
sys.path.append(common_path + "/Common")
sys.path.append(common_path + "/AntiMalware")

import commonFns
import CommonODSFns 
import CommonAntiMalwareFns
from CommonTest import *

# Get testcase name
testcaseName = sys.argv[0][:-3]

class TestCase(BaseTest):

    def __init__(self):
        logging.info("TestcaseID : 18055")
        logging.info("Quarantine succeeds for ODS")

    def init(self):
        logging.info("Initializing testcase %s" % testcaseName)

        # Call the common initialization check
        _retval = BaseTest.init(self)
        if _retval != 0 :
            return _retval

        logging.info("Installing QATestTool")
        if CommonAntiMalwareFns.installAntiMalwareTestTool() != True :
            logging.error("Failed to install QATestTool")
            return 1
        CommonAntiMalwareFns.resetToDefaults()

        return 0
    

    def execute(self):
        logging.info("Executing testcase %s" % testcaseName)

        # Create temporary file for testing
        self._infectFilePath = os.path.realpath(tempfile.mkstemp(prefix="ods_test_")[1])

        # Disable OAS temporarily to create infection file
        if CommonAntiMalwareFns.disableOAS() != True:
            logging.error("Unable to disable OAS")
            return 1
        time.sleep(10)
        # Create infection.  Since the default setting is to scan the files while read, creating file should be successful...
        if CommonAntiMalwareFns.createInstallCheckInfection(self._infectFilePath) ==  False:
            logging.error("Unable to create infected file.")
            return 1
        logging.info("Successfully created infected file.")
        #clean
        if CommonODSFns.setAVPrimaryAction("1")!=True:
            logging.error("Unable set Primary Action.")
            return 1
       
         #Quarantine
        if CommonODSFns.setAVSecondaryAction("3")!=True:
            logging.error("Unable set Secondry Action.")
            return 1
        if CommonODSFns.setODSScanNow(self._infectFilePath)!=True:
            logging.error("Unable set ODSScanNow.")
            return 1
        return 0
    def verify(self):
        if CommonAntiMalwareFns.isFileQuarantined(self._infectFilePath) == True:
            logging.info("Successfully Quarantained file.")
            return 0
        return 1       

    def cleanup(self):
        logging.info("Performing cleanup for testcase %s" % testcaseName)
        # Copy logs.
        foundCrash = 0
        foundCrash = commonFns.copyLogs()
        CommonAntiMalwareFns.resetToDefaults()
        # Clean the logs
        commonFns.cleanLogs()

        if foundCrash != 0:
            logging.error("copylogs returned failure status.  Maybe a product crash")

        return foundCrash

    def __del__(self):
        pass

if __name__ == "__main__":
    # Setup testcase
    setupTestcase(sys.argv)

    testObj = TestCase()

    # Perform testcase operations
    retVal = testObj.init()

    # Perform execute once initialization succeeds...
    if(retVal == 0):
        retVal = testObj.execute()

    # Once execution succeeds, perform verification...
    if(retVal == 0):
        retVal = testObj.verify()

    # Perform testcase cleanup
    retVal += testObj.cleanup()

    if(retVal == 0):
        resultString = "PASS"
    else:
        resultString = "FAIL"

    logging.info("Result of testcase %s: %s" % (testcaseName, resultString) )
    sys.exit(retVal)
