#!/tools/bin/perl  
#This test script must be running on Dong's testbed.
#It's statically defined 
#use Test::More  tests => 2 ; # the number of tests
use lib '/tools/lib/perl5/site_perl/5.8.4';
use lib '/tools/tests/regression';
use Carp;
use Getopt::Std ;
#use strict;
use Time::localtime;
use XMLRPC::Lite;
use orbital_rpc;
my $log_dir = '/var/tmp/';
my $script_dir = '/tools/tests/dong/6800/';
my $locOrb = '10.200.38.55';
my $remOrb = '10.200.38.65';
my $remServer = '30.30.10.76';
my $dr = '20.20.20.1';
my $testcase = '6800_regress';
my $orbital = 'Orb-6800';

getopt ("m");
my $send_mail = 0;	#default is not sending email result out
if ($opt_m) { $send_mail = $opt_m; chomp ($send_mail) }
my $tm=localtime; $tm = sprintf("%02d%02d%04d", $tm->mday,($tm->mon)+1, $tm->year+1900);

my $locOrb_url = "http://$locOrb:2050/RPC2";
my $locOrb_rpc = Orbital::Rpc->new($locOrb_url);

#Find the Orb tested version
my $version= $locOrb_rpc->get_system_variable("Version");
my @version = split(/\s+/, $version);
my $i = 0; my $release ="";
while ($version[$i]) {
   if ($version[$i++] eq "Release") {
      $release = "$version[$i++]"."-";
      my $subversion = int ($version[++$i]);
      $release = "$release"."$subversion";}
}

my $log_file = "$log_dir"."$testcase"."_$release"."_$tm".".log";
   open (LOG,  "> $log_file") || die "Could not open the file $log_file \n";

#print the header result
print LOG '*' x50, "\n";
print LOG "$orbital REGRESSION TEST RESULT OF RELEASE:  $release \n";
print LOG '*' x50, "\n\n";


#Run Iperf Performance test with Compression OFF & SB On
sleep 5;
my $test = "$script_dir"."6800_performance.pl";
if (run_test("$test  -o $locOrb -r $remOrb -s $remServer -c 0 -b 1 -d $dr",$log_file)) {
   print LOG  "\nNon_Compression-SB Performance Regression:  PASS \n"
   } else { print LOG  "\nNon_Compression-SB Performance Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run Iperf Performance test with Compression ON (highly_compressible) & SB On
sleep 5;
if (run_test("$test -o $locOrb -r $remOrb -s $remServer  -c 1 -b 1 -d $dr",$log_file)) {
   print LOG  "\nHigh_Compression-SB Performance Regression:  PASS \n"
   } else { print LOG  "\nHigh_Compression-SB Performance Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run Iperf Performance test with Compression ON (3X) & SB On
sleep 5;
if (run_test(" $test -o $locOrb -r $remOrb -s $remServer  -f 1 -b 1 -d $dr",$log_file)) {
   print LOG  "\n3X_Compression-SB Performance Regression:  PASS \n"
   } else { print LOG  "\n3X_Compression-SB Performance Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run Iperf Performance test with Compression OFF & HB
sleep 5;
if (run_test("$test -o $locOrb -r $remOrb -s $remServer  -c 0 -d $dr",$log_file)) {
   print LOG  "\nNon_Compression-HB Performance Regression:  PASS \n"
   } else { print LOG  "\nNon_Compression-HB Performance Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run Iperf Performance test with Compression ON (highly_comp) & HB
if (run_test("$test -o $locOrb -r $remOrb -s $remServer -c 1 -d $dr",$log_file)) {
   print LOG  "\nHigh_Compression-HB Performance Regression:  PASS \n"
   } else { print LOG  "\nHigh_Compression-HB Performance Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run Iperf Performance test with Compression ON (3X) & HB
if (run_test("$test -o $locOrb -r $remOrb -s $remServer -c 1 -f 1 -d $dr -m $send_mail",$log_file)) {
   print LOG  "\nHigh_Compression-HB Performance Regression:  PASS \n"
   } else { print LOG  "\nHigh_Compression-HB Performance Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run FlowControl test with no compression
$test = "$script_dir"."6800_flowcontrol.pl";
if (run_test("$test -o $locOrb -r $remOrb -s $remServer ",$log_file)) {
   print LOG  "\nFlow Control Regression:  PASS \n"
   } else { print LOG  "\nFlow Control Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run Flow control test with compression
if (run_test("$test $locOrb -r $remOrb -s $remServer -c 1 -m $send_mail",$log_file)) {
   print LOG  "\nFlow Control Regression:  PASS \n"
   } else { print LOG  "\nFlow Control Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

#Run Apache test with Compression ON, OFF
$test = "$script_dir"."6800_apache.pl";
sleep 10;
if (run_test("$test $locOrb -r $remOrb -s $remServer -m $send_mail", $log_file)) {
   print LOG  "\nHardboost - Apache Benchmark Regression:  PASS \n"
   } else { print LOG  "\nHardboost - Apache Benchmark Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";


#Run Apache test with Compression ON, OFF on Softboost
sleep 10;
if (run_test("$test $locOrb -r $remOrb -s $remServer  -b 1 -m $send_mail", $log_file)) {
   print LOG  "\nSoftboost - Apache Benchmark Regression:  PASS \n"
   } else { print LOG  "\nSoftboost - Apache Benchmark Regression:  FAIL \n"}
   print LOG '*' x80, "\n\n";

sleep 10;
#TEST COMPLETED ...EMAIL IF NEEDED
print "\nTEST COMPLETED ....\nEMAIL  $log_file \n";
 
if ($send_mail) {
#   print `mail \-s \"Regression Test Results Of Release $release\" engineering\@orbitaldata.com \< $log_file`; 
   print `mail \-s \"Orb6800 - Regression Test Results Of Release $release\" dong\@orbitaldata.com \< $log_file`; 
   }
  

#*******************************************************************************
sub run_test
{
    my $test = shift ;
    my $log_file = shift;
    my $case_pass = 0;        #set result to FAIL by default;
    my $case_fail = 0;
    open (LOG,  ">> $log_file") || die "Could not open the file $log_file \n";
    my $invoke = "/tools/bin/perl $test" ;
    print "\nRunning:  $invoke \n" ;
    print LOG "\nRunning: $invoke \n\n";
    sleep 2 ;
    my @result = `$invoke` ;
    my $i = 0;
    while ($result[$i]) {
      if ($result[$i]=~ /not ok\s/) {
         print LOG "Sub-Case $result[$i]";
         $case_fail++;
#         print "\nTotal cases fail: $case_fail \n";
         } elsif ($result[$i] =~ /ok\s/) {
             print LOG  "Sub-Case $result[$i]\n";
             $case_pass++;      #test fails because at least one sub-case fails.
#             print "\nTotal cases pass: $case_pass \n";
             }
      $i++;
    }  #end of while, means all sub-cases pass!
    
    if ($case_fail) {                
        print LOG "\nTest Failed!!! \n";
        print LOG "Check the logs of individual testcase for more details.\n";
        }   

    print "Total sub-cases PASS: $case_pass \n";
    print "Total sub-cases FAIL: $case_fail \n";
    if ($case_fail) {return 0} else {return 1}
}


