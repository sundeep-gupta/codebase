<?
   define('PAGE_IS_HA_CLUSTER_INDEPENDANT', true);
   include("includes/header.php");
   $Auth->CheckRights(AUTH_LEVEL_ADMIN);

   function DoIndent($Indent) {
      if ($Indent > 0) {
         return "   " . DoIndent($Indent-1);
      } else {
         return "";
      }
   }
   function XMLStr($Name,$Value,$Indent=1) {
      echo DoIndent($Indent) . "<" . $Name . ">\n";
      echo DoIndent($Indent+1) . $Value . "\n";
      echo DoIndent($Indent). "</" . $Name . ">\n";
   }
   function DoEndPoint($Label,$E,$DoClose) {
      echo DoIndent(1) . "<" . $Label . ">\n";
      XMLStr("IP",$E["Phar"]["Logical"]["Dotted"],2);
      XMLStr("Port",$E["Phar"]["Logical"]["Port"],2);
      if ($E["Agent"]["Accelerated"]) {
         XMLStr("Agent",$E["Agent"]["Printable"],2);
      }
      if ($DoClose) {
         $x = array("BytesTransmitted",
                    "PayloadTransmitted",
                    "BytesTransmittedGood",
                    "PayloadTransmittedGood",
                    "PayloadReceived",
                    "BytesReceived",
                    "PayloadReceivedGood",
                    "BytesReceivedGood");
         foreach($x as $l) {
            XMLStr($l,$E[$l],2);
         }
         XMLStr("Win",$E["MaxReceivedWindowSize"]);
         XMLStr("Rtt",$E["RttMilliSeconds"]);

      }
      echo DoIndent(1) . "</" . $Label . ">\n";
   }

   function UploadLog($First,$Last,$MinRecordNumber,$MaxRecordNumber, $ShowLogInSameWindow) {
      if ($First < $MinRecordNumber) {
         echo "Invalid upload record, first record number $First is smaller than the start of the log at $MinRecordNumber";
      } else if ($Last  > $MaxRecordNumber) {
         echo "Invalid upload record, last record number $Last is larger than the end of the log at $MaxRecordNumber";
      } else if ($Last <= $First) {
          echo "Empty Upload Request";
      } else if (($Last-$First) > GetParameter("Log.MaxExportRecordCount")) {
          echo "<br>Requested upload is " . ($Last-$First) . " record which exceeds current max log export size ".
               " of " . GetParameter("Log.MaxExportRecordCount");
      } else {
         //
         // We can only do certain sized chunks, just loop over them.
         //
         $RequestSize = GetParameter("Log.MaxRecordNumberRequest");
         if (!isset($_GET["AllRecord"])) {
            if (isset($_GET["OpenRecord"])) $Types["openconnection"]=1;
            if (isset($_GET["CloseRecord"])) $Types["closeconnection"]=1;
            if (isset($_GET["TextRecord"])) $Types["text"]=1;
         }
         if ($_GET["Format"] == 1) {
            //
            // Do as XML
            //
            if (!$ShowLogInSameWindow){
               header("Content-Type: text/plain");
               header("Content-Disposition: attachment; filename=LogRecords" . $First. "_" . $Last. ".xml");
            }
            echo "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n";
            echo "<!-- Generated By Orbital Data Version " . GetSystemParam("Version") . " -->\n";
            echo "<logrecords>\n";
            echo "$First $Last";

            $StartRecord = $First;
            while ($StartRecord <= $Last) {
               $Param["StartRecord"] = (int)$StartRecord;
               $Param["Count"] = 10;
               if (isset($Types)){ $Param["Types"] = $Types; }
               $LogInfo = xu_rpc_http_concise(
                              array(
                                 'method' => "LogRequestXML",
                                 'args'      => $Param,
                                 'host'      => RPC_SERVER,
                                 'uri'    => RPC_URI,
                                 'port'      => RPC_PORT,
                              )
               );
               for($i = 0; $i < sizeof($LogInfo); $i++) {
                  $LogElement = $LogInfo[$i];
                  if (isset($LogElement["Type"])) {
                     echo "<" . $LogElement["Type"] . ">\n";
                     XMLStr("Date",FormatDate($LogElement["Date"]));
                     switch ($LogElement["Type"]) {
                        case "text":
                           XMLStr("Text",$LogElement["Text"]);
                           break;
                        case "openconnection":
                           if ($LogElement["Initiator"] == "FAST") {
                              XMLStr("Initiator","LAN");
                              DoEndPoint("WAN",$LogElement["Client"],false);
                              DoEndPoint("LAN",$LogElement["Server"],false);
                           } else {
                              XMLStr("Initiator","WAN");
                              DoEndPoint("WAN",$LogElement["Server"],false);
                              DoEndPoint("LAN",$LogElement["Client"],false);
                           }
                           break;
                        case "closeconnection":
                           XMLStr("Duration",$LogElement["Duration"]);
                           if ($LogElement["Initiator"] == "FAST") {
                              XMLStr("Initiator","LAN");
                              DoEndPoint("WAN",$LogElement["Client"],true);
                              DoEndPoint("LAN",$LogElement["Server"],true);
                           } else {
                              XMLStr("Initiator","WAN");
                              DoEndPoint("WAN",$LogElement["Server"],true);
                              DoEndPoint("LAN",$LogElement["Client"],true);
                           }
                           break;
                        default:
                           break;
                     }
                     echo "</" . $LogElement["Type"] . ">\n";
                  }
                  if (isset($LogElement["RecordNumber"])){
                     $StartRecord = $LogElement["RecordNumber"];
                  }else{
                     $StartRecord++;
                  }
                  if (!$ShowLogInSameWindow){
                     echo "<BR>";
                  }
               }
            }
            echo "</logrecords>\n";
         } else {
            //
            // Do As Text
            //
            if (!$ShowLogInSameWindow){
               header("Content-Type: text/plain");
               header("Content-Disposition: attachment; filename=LogRecords" . $First. "_" . $Last. ".txt");
            }
            $StartRecord = $First;
            while ($StartRecord <= $Last) {
               $Param["StartRecord"] = (int)$StartRecord;
               $Param["Count"] = 10;
               if (isset($Types)){ $Param["Types"] = $Types; }
               $LogInfo = xu_rpc_http_concise(
                              array(
                                 'method' => "LogRequest",
                                 'args'      => $Param,
                                 'host'      => RPC_SERVER,
                                 'uri'    => RPC_URI,
                                 'port'      => RPC_PORT,
                              )
               );
               for($i = 0; $i < sizeof($LogInfo); $i++) {
                  $LogElement = $LogInfo[$i];
                  if (array_key_exists("Fault",$LogElement)) {
                     //Skip this record because it doesn't appear to exists
                     $StartRecord ++;
                  } else {
                     echo $LogElement["RecordNumber"] . ",";
                     echo "\"" .FormatDate($LogElement["Date"]) ."\",\"" .addcslashes($LogElement["Text"],"\"'\r\n")."\"\n";
                     if ($ShowLogInSameWindow){echo "<BR>";}
                     $StartRecord = $LogElement["RecordNumber"];
                  }                  
               }
            }
         }
      }
   }
   //
   // Get Current Log File Size
   //
   $Result = xu_rpc_http_concise(
                  array(
                     'method' => "LogInfoRequest",
                     'host'      => RPC_SERVER,
                     'uri'    => RPC_URI,
                     'port'      => RPC_PORT
                  )
   );
   $MinRecordNumber = $Result["Left"];
   $MaxRecordNumber = $Result["Right"]-1;
   $ShowLogInSameWindow = isset($_GET["OpenInSameWindow"]);
   if (isset($_GET["UploadFirstNumber"]) && isset($_GET["UploadLastNumber"])) {
      UploadLog($_GET["UploadFirstNumber"],$_GET["UploadLastNumber"],$MinRecordNumber,$MaxRecordNumber, $ShowLogInSameWindow );

   } else if (isset($_GET["UploadFirstDate"]) && isset($_GET["UploadLastDate"])) {
      if (($First = strtotime($_GET["UploadFirstDate"])) === -1) {
         echo "Invalid From Date: " . $UploadFirstDate;
      } else if (($Last = strtotime($_GET["UploadLastDate"])) === -1) {
         echo "Invalid To Date: " . $UploadLastDate;
      } else {
        $LogInfo = xu_rpc_http_concise(
                     array(
                        'method' => "LogDateToRecordNumber",
                        'args'      => array(array($First,$Last+1)),
                        'host'      => RPC_SERVER,
                        'uri'    => RPC_URI,
                        'port'      => RPC_PORT,
                     )
         );
         UploadLog($LogInfo[0],$LogInfo[1],$MinRecordNumber,$MaxRecordNumber, $ShowLogInSameWindow );
      }
   } else {
      $handle = popen("df . | tail -1 | awk -- '{print $4; }'","r");
      $MaxLogSize = (int)(fread($handle,100) / 1000);
      pclose($handle);
      $MaxLogSize += GetSystemParam("CurrentLogSize"); // Reuseable Space

      if (isset($_GET["DirSize"])) {
         $ProposedValue = $_GET["DirSize"];
         if ($ProposedValue > $MaxLogSize) {
            $ProposedValue = $MaxLogSize;
         }
         SetParameterText("Log.MaxDirectorySize",Max(1,Min(1000,$ProposedValue)));
      }

      if (isset($_GET["Count"])) {
         SetParameterText("Log.DisplayRecordCount",$_GET["Count"]);
      }

      if (isset($_GET["MaxExport"])) {
         SetParameterText("Log.MaxExportRecordCount",Max(1,$_GET["MaxExport"]));
      }

      echo "<font class='pageheading'>Configure Settings: Logging</font><BR><BR>";
      echo "<font class='pageheading'>Log Configuration</font><BR><BR>";
      $CurSize = GetSystemParam("CurrentLogSize");

      $CurLogSize = GetSystemParam("CurrentLogSize");
      $Request["StartRecord"] = $MinRecordNumber;
      $FirstRecord = xu_rpc_http_concise(
                     array(
                        'method' => "LogRequest",
                        'args'      => $Request,
                        'host'      => RPC_SERVER,
                        'uri'    => RPC_URI,
                        'port'      => RPC_PORT,
                     )
      );
      $Request["StartRecord"] = $MaxRecordNumber-1;
      $LastRecord = xu_rpc_http_concise(
                     array(
                        'method' => "LogRequest",
                        'args'      => $Request,
                        'host'      => RPC_SERVER,
                        'uri'    => RPC_URI,
                        'port'      => RPC_PORT,
                     )
      );
     ?>

      <div class="settings_table">
      <TABLE>
         <TR>
            <TH>Current Log Consumes:</TH>
            <TD><?=$CurLogSize?> MB</TD>
         </TR>
         <TR>
            <TH>Max Log Size:</TH>
            <TD><?=$MaxLogSize?> MB</TD>
         </TR>
         <TR>
            <TH>Oldest Log Entry:</TH>
            <TD><?=FormatDate($FirstRecord[0]["Date"])?></TD>
         </TR>
       </TABLE>
       </div>
   <BR><BR>
   <?
   /*
      echo
         MakeHelpFunction("Help1","Log File Size Limit","This settings limits the maximum amount of disk space that ".
                               "the log is allowed to occupy. When the log fills up, the oldest log entries are ".
                               "automatically deleted."),

         MakeHelpFunction("Help2","Log Display Page","This setting specifies the number of lines that are displayed ".
                                 " on a single page of log listing."),

         MakeHelpFunction("Help3","Max Log Export Size","This setting limits the maximum number of records that can be exported ".
               "from the log in a single export request. It is provided as a safety feature to avoid accidental " .
               "exports that are extremely large. Also, large log extractions may cause a timeout error in your browser.");

      $Table = new HTML_TABLE();
      $ParamForm = new HTML_PARAMETER_FORM();
      echo
         "<br>",
         $Table->Begin("width550"),
         $ParamForm->Begin("LogSettings"),
         $Table->AddHeader1("Log Settings"),

         $Table->AddEntry("Log File Size Limit:" . MakeHelpTag("Help1"),
                           $ParamForm->AddTextParam("Log.MaxDirectorySize") . "MB"),
         $Table->AddEntry("Log Display Page:" . MakeHelpTag("Help2"),
                           $ParamForm->AddTextParam("Log.DisplayRecordCount") . "Lines" ),
         $Table->AddEntry("Max Log Export Size:" . MakeHelpTag("Help3"),
                           $ParamForm->AddTextParam("Log.MaxExportRecordCount") . "Lines"),
         $Table->AddEntry("", $ParamForm->AddSubmit() ),
         $ParamForm->End(),
         $Table->End();

      echo "</CENTER>";
      */
?>

<font class="pageheading">Log Options</font><BR><BR>
<?

      $Table = new HTML_TABLE();
      $ParamForm = new HTML_PARAMETER_FORM();
      echo
         "<div class=\"settings_table\">",
         $Table->Begin(),
         $ParamForm->Begin("LogConfigUpdate"),

         $Table->AddEntry("Log Max Size (MB):",   $ParamForm->AddTextParam("Log.MaxDirectorySize", 4)),
         $Table->AddEntry("Lines Displayed:", $ParamForm->AddTextParam("Log.DisplayRecordCount", 4)),
         $Table->AddEntry("Max Lines Export:", $ParamForm->AddTextParam("Log.MaxExportRecordCount", 4)),
         $Table->AddEntry("Show System Records:", $ParamForm->AddBooleanParam("UI.Log.ShowSystemRecords")),
         $Table->AddEntry("Show Adapter Records:", $ParamForm->AddBooleanParam("UI.Log.ShowAdapterRecords")),
         $Table->AddEntry("Show Flow Records:", $ParamForm->AddBooleanParam("UI.Log.ShowFlowRecords")),
         $Table->AddEntry("Show Connection Records:", $ParamForm->AddBooleanParam("UI.Log.ShowConnectionRecords")),
         $Table->AddEntry("Show Open/Close Records:", $ParamForm->AddBooleanParam("UI.Log.ShowOpenCloseRecords")),
         $Table->AddEntry("Show Text Records:", $ParamForm->AddBooleanParam("UI.Log.ShowTextRecords")),
         $Table->AddEntry("Show Alert Records:", $ParamForm->AddBooleanParam("UI.Log.ShowAlertRecords")),
         
         $Table->AddEntry("", $ParamForm->AddSubmit() ),
         $ParamForm->End(),
         $Table->End(),
         "</div>";

      /*
         $Table->AddEntry("Display On Log Page:",
                           $ParamForm->AddCheckBox("") . " System Status<BR>" .
                           $ParamForm->AddCheckBox("") . " Adapter Status<BR>" .
                           $ParamForm->AddCheckBox("") . " Connection Opens<BR>" .
                           $ParamForm->AddCheckBox("") . " Connection Closes<BR>" .
                           $ParamForm->AddCheckBox("") . " Flow Status<BR>"
                           ),
        */
?>
      <BR><BR>
      <font class="pageheading">Log Extract</font><BR><BR>

      <table>
      <tr><th colspan=5>Log Extract</th></tr>
      <tr>
      <th> From </th>
      <th> To   </th>
      <th width=100> Format </th>
      <th width=110> Record Types </th>
      <th width=50> </th>
      </tr>
      <tr>
      <form>
         <td nowrap>
         <input type=number name=UploadFirstNumber size=14 value=<?=$MinRecordNumber?>>
         </td>
         <td nowrap>
         <input type=number name=UploadLastNumber  size=14 value=<?=$MaxRecordNumber?>>
         </td>
         <td align=center>
         <input type=radio name=Format value=0> Text
         <input type=radio name=Format value=1 checked> XML
         </td>
         <td align=center>
         <DIV class=no_formatting>
         <TABLE>
         <TR>
         <TD><input type=checkbox name=OpenRecord> Open </TD>
         <TD><input type=checkbox name=CloseRecord checked> Close </TD>
         <TD><input type=checkbox name=AllRecord> All </TD>
         </TR>
         </TABLE>
         </DIV>
         </td>
         <td>
         <input type=submit value="By Record Number">
         </td>
       </form>
      </tr>
      <tr>
      <form>
         <td nowrap>
         <input type=number name=UploadFirstDate size=16 value=<?="\"".FormatDate($FirstRecord[0]["Date"])."\""?>>
         </td>
         <td nowrap>
         <input type=number name=UploadLastDate  size=16 value=<?="\"".FormatDate( $LastRecord[0]["Date"])."\""?>>
         </td>
         <td align=center>
         <input type=radio name=Format value=0> Text
         <input type=radio name=Format value=1 checked> XML
         </td>
         <td align=center>
         <DIV class=no_formatting>
         <TABLE>
         <TR>
         <TD><input type=checkbox name=OpenRecord> Open </TD>
         <TD><input type=checkbox name=CloseRecord checked> Close </TD>
         <TD><input type=checkbox name=AllRecord> All </TD>
         </TR>
         </TABLE>
         </DIV>
         </td>
         <td>
         <input type=submit value="By Date">
         </td>
       </form>
       </table>
      <br>
   <?
   }
include(HTTP_ROOT_INCLUDES_DIR ."footer.php"); ?>
