#!/tools/bin/perl  
#dong 6/27/05
# add command to reboot the Orb after suc loading the patch.
# (starting from 0.0.0-142, Orb will prompt for rebooting after loading patch)
#dong 7/11/05
#reboot the host running iperf server service before starting the test
# This host should always has iperf -s running from the rc.local file
#8/17/05
#The script now can run multi releases per night
#------------------------------------------------------------
use lib '/tools/lib/perl5/site_perl/5.8.4';
use lib '/tools/tests/regression';
use Carp;
use strict;
use Time::localtime;
use XMLRPC::Lite;
use orbital_rpc;
#$ENV{'PYTHONPATH'}='/tools/tests/orbpy:/tools/medusa-20010416';

my $testcase = 'autoreg';

#define the tested bracnh for nightly regression
#my $branch = 'orbital-1.7.';		# 1.7 branch
#my $branch = 'orbital-0.0.0.';          # trunk
my $branch = 'orbital-1.8.';		# Monaco 
my @branches = ('orbital-0.0.0.', 'orbital-1.8.');
my $log_dir = '/var/tmp/';
#my $log_dir = '/logs/regression_results/';

my $patch_dir = '/orb_patches/';		#home of the patches
my $locOrb = '10.200.199.133';
my $remOrb = '10.200.199.134';
my $host = '10.200.199.114';
my $server ='10.104.2.2';           #tested IP address, not the mgmt IP
my $tm=localtime; 
my $loc_date = sprintf("%02d%02d%04d", $tm->mday,($tm->mon)+1, $tm->year+1900);
my $loc_time;
my $i = 1;
my $locOrb_url = "http://$locOrb:2050/RPC2";
my $remOrb_url = "http://$remOrb:2050/RPC2";
my $locOrb_rpc = Orbital::Rpc->new($locOrb_url);
my $remOrb_rpc = Orbital::Rpc->new($remOrb_url);
my $server_url= "http://" . $server ."/" ;
my $log_file = "$log_dir"."$testcase"."_$loc_date".".log";
my $LOG ;
open ($LOG, ">$log_file") || die "Could not open the file $log_file \n";

foreach $branch (@branches) {

   my $patch = &find_patch ($branch);        #find the latest patch from trunk; exit if fails

   #upload new patch to the local Orb
   my @load_result = &load_patch ($locOrb, $patch) ;        
   my $load_result;
   if ($load_result =~ /^$locOrb:\s+end/, @load_result) { 	#if loaded suc
      print $LOG "\nSUCCESSFULLY LOADED ON $locOrb\n"
      } else { 
           print $LOG "\nFAILED TO LOAD ON $locOrb\n"
           }
   
   #upload new patch to the remote Orb
   @load_result = &load_patch ($remOrb, $patch) ;        
   if ($load_result =~ /^$remOrb:\s+end/, @load_result) { 	#if loaded suc
      print $LOG "\nSUCCESSFULLY LOADED ON $remOrb\n"
      } else { 
           print $LOG "\nFAILED TO LOAD ON $remOrb\n"
           }

    #Reboot the Orb (6/27/05)
    print $LOG "\nReboot the locOrb $locOrb ...", $locOrb_rpc->send_command('reboot'); 
    print $LOG "\nReboot the remOrb $remOrb ...", $remOrb_rpc->send_command('reboot'); 

    #Reboot the Iperf Server
    print $LOG "\nReboot the Iperf server $host";
    print $LOG `ssh $host \"reboot\"`;

    #Report the newly loaded patches
    sleep 300;
    print $LOG "\nOrbital $locOrb is running ...", &orb_version($locOrb_rpc), "\n";
    print $LOG "\nOrbital $remOrb is running ...", &orb_version($remOrb_rpc), "\n";

    #Start regression test
    #print $LOG "Start Regression Test \n", `\/tools\/tests\/regression\/regress -m 0`;  #private version - no email result
    print $LOG "Start Regression Test \n", `\/tools\/tests\/regression\/paris_regress -m 1`;
#    print $LOG "Start Regression Test \n", `\/tools\/tests\/regression\/regress -m 1`;   #run pre-1.8 regression version
    sleep 30;  #sleep 30 sec before testing the next release
}     #end of foreach 'branch'


#-----------------------------------------------------
#This sub calls python's ui_ctrl.py to upgrade the Orb
#-----------------------------------------------------
sub load_patch
{
   my $orb = shift;
   my $patch = shift;
   $patch = "$patch_dir"."$patch";
   return `python \/tools\/tests\/ui_ctrl\/ui_ctrl.py -U $patch $orb`;
} 

#----------------------------------------------------
# Find the running Orb version
# input: $locOrb_rpc or $remOrb_rpc
#----------------------------------------------------
sub orb_version
{
    my $orb_rpc = shift;
    my $ver = $orb_rpc->get_system_variable("Version");
    my @ver = split(/\s+/, $ver);
    my $i = 0; my $rel ="";
    while ($ver[$i]) {
       if ($ver[$i++] eq "Release") {
          $rel = "$ver[$i++]"."-";
          my $subver = int ($ver[++$i]);
          $rel = "$rel"."$subver";
        }
    }
    return $rel;
}

#---------------------------------------------------------
#Find the latest trunk patch from BOT=10.200.2.103/patches
# find_patch (tested branch)
#------------------------------------------
sub find_patch
{
  my $branch = shift;
  my $bot = '10.200.2.103';
#  my $res = `lftp -c 'open $bot/patches\; ls -rt | grep orbital-0.0 | tail -1\; bye'`;
#  print "PATCH BELONG TO $branch \n";
  my $res = `lftp -c 'open $bot/patches; ls -rt | grep $branch | tail -1; bye'`;
  my @res = split(/\s+/, $res);
  my $file_name = pop(@res);
#print  "TESTED PATCH IS: $file_name\n";
  print $LOG "TESTED PATCH IS: $file_name\n";
  my $url = "ftp://"."$bot"."/patches/";
  my $download_result = &run_wget($url, $file_name, $patch_dir);
  if ($download_result =~ /Remote file no newer than local file/) {
     print $LOG "NO BUILD TODAY\n"; exit 1;
     } else {
         print $LOG "START REGRESSION ON $file_name \n"
     }
  return  $file_name;
}

#----------------------------------------------------
# Call WGET
#----------------------------------------------------
sub run_wget
{
  my $url = shift ;
  my $file = shift ;
  my $dest = shift;
  $url .= "$file" ;
  print $LOG "URL($url)\n";
  # WGET -N (only if the file is newer) -P (dest directory)
  my $wget = `wget $url -N -P $dest 2>&1`;
  print $LOG "$wget \n";
  return $wget ;
}

#sleep 60;
