#!/tools/bin/perl

=head NAME
BDC_performance

=head1 DESCRIPTION
Measure DBC performance of a file on a given BW.
The Flowcontrol is tentatively set for HB.
 
=head1 Authors
Dong Duong 
11/22/05
=cut 

use lib '/tools/lib/perl5/site_perl/5.8.4';
use lib '/tools/tests/regression';
use Test::More  qw(no_plan); 
use Time::localtime;  
use Carp ;
use Getopt::Std ;
use XMLRPC::Lite;
use Data::Dumper;
use orbital_rpc;


my $testcase="DBC_01";
my $secondpass_ratio = 50.0;
my $max_ingress = 170;          #Cap by FTP thruput (estimated)
my @bw_list = (15, 45);  

my $dr = "20.20.20.1";           #default Delay Router 
my $dr_dest='0.0.0.0';
my $rtt = 100;
my $loss = 0;
my $maxbw = 155;           #Mbps
my $maxbw_bps = 155000000;          #the remOrb must have this value before testing.
my $log_dir = '/var/tmp/';
#my $log_dir = '/logs/regression_results/';

#------------------------------------------------------------------------------------------.
# format:
# DBC_performance -s <> -o <> -r <> -f <file>  |-m <1 sendMail>| -b <1 SB> |-x <1 compressible>
#------------------------------------------------------------------------------------------

getopt ("r,o,s,m,b,x,w") ;

if (  ! $opt_s || ! $opt_o) || !$opt_f ) {
  print "Usage: $testcase -r <remOrb> -o <locOrb> -s <FTPSer> -f <file> |-m <1 sendmail> |-b <1 SB> |-x <1 compressible>  \n" ;
  exit 1 ;
}

my $send_mail = 0;                #default is not sending email
if ($opt_m) { $send_mail = $opt_m; chomp ($send_mail) };


my $host = $opt_s; chomp ($host );

my $locOrb = $opt_o; chomp ($locOrb);       #setup the Orb for XMLRPC
my $locOrb_url = "http://$locOrb:2050/RPC2";
my $locOrb_rpc = Orbital::Rpc->new($locOrb_url);

my $remOrb = $opt_r; chomp ($remOrb);       #setup the Orb for XMLRPC
my $remOrb_url = "http://$remOrb:2050/RPC2";
my $remOrb_rpc = Orbital::Rpc->new($remOrb_url);


my $version = $locOrb_rpc->get_system_variable("Version");

my $file = $opt_f; chomp($file);		#default is testing compressible file
#my $bandwidth = $opt_w; chomp($bandwidth);

#Only support HB for this test case - this is used for future enhanced script
my $softboost= 0;		#set to HB as default
if ($opt_b) {$softboost=$opt_b; chomp($softboost)}  #SB=1 & HB=0
#---------------------------------------------------------------------------

my $tm=localtime;
$tm = sprintf("%02d%02d%04d", $tm->mday,($tm->mon)+1, $tm->year+1900);

#Find the tested Orb's version
my $release= &orb_version($RemOrb_rpc); 
printf "THE REMOTE ORBITAL IS RUNNING: %8s \n", $release;     
my $release= &orb_version($locOrb_rpc);                 #The test does not require both Orbs to have the same release 
printf "THE LOCAL ORBITAL IS RUNNING: %8s \n", $release;     

#create the individual log file
my $log_file = "$log_dir"."$testcase"."_$release"."_$tm".".log";
print "this is the log file: $log_file \n";
open (LOG,  "> $log_file") || die "Could not open the file $log_file \n";

#The stat file retains all the performance test results. New Results are appended to the file.
my $stat_file = "$log_dir"."$testcase"."_stats".".log"; #contains perf results of all individual test.
if (-e $stat_file) {
   open (STAT,  ">> $stat_file") || die "Could not open the file $stat_file \n";
   } else {                       #file is not there
       open (STAT,  "> $stat_file") || die "Could not open the file $stat_file \n";
       #Create the file header
       print STAT "\n",'*' x62;
       printf STAT "\n%-40s\n",'DBC Test Configuration';
#       printf STAT "%-20s%-6.2fx %5s\n",'Tested Bandwidth', $bandwidth, 'Mbps',"\n";
#       printf STAT "%-20s%15s\n",'Tested File', $file,"\n";
       print STAT '*' x62,"\n\n";
       print STAT '-' x155;
       printf STAT "\n%8s%10s",'Date', 'Release';
       foreach $bw (@bw_list) {
          my $first = "$bw"."[1st-run]";
          my $second = "$bw"."[2nd-run]";
          printf STAT "%10s%10s", $first, $second;
          }
       printf STAT "%15s\n", 'CONFIGURATION';
 
       print STAT '-' x155, "\n";
       }

#Initialize the testbed ...

# Make sure the locOrbs have  compression turned ON.
print LOG "Turn ON Compression for the locOrb... ", $locOrb_rpc->set_parameter('Compression.EnableCompression', '1'), "\n";
print LOG "\nThe Tested Compression Setting for the locOrb: ", $locOrb_rpc->get_parameter('Compression.EnableCompression'),"\n";

#The same thing on the remOrb
print LOG "Turn ON Compression for the remOrb... ", $remOrb_rpc->set_parameter('Compression.EnableCompression', '1'), "\n";
print LOG "\nThe Tested Compression Setting for the remOrb: ", $remOrb_rpc->get_parameter('Compression.EnableCompression'),"\n";

#6/29 Softboost now is also limitted by the sending rates.
print LOG "Set the locOrb SendRate To $maxbw_bps \n", $locOrb_rpc->set_parameter('SlowSendRate', $maxbw_bps);
print LOG "Set the locOrb RecvRate To $maxbw_bps \n", $locOrb_rpc->set_parameter('SlowRecvRate', $maxbw_bps);
print LOG "Set the remOrb SendRate To $maxbw_bps \n", $remOrb_rpc->set_parameter('SlowSendRate', $maxbw_bps);
print LOG "Set the remOrb RecvRate To $maxbw_bps \n", $remOrb_rpc->set_parameter('SlowRecvRate', $maxbw_bps);

#initialize the DR
config_CNISTNET ($dr, $dr_dest, $maxbw, $rtt, $loss);

if ($softboost)   {        
   print LOG "\nSet locOrb To SoftBoost: ", $locOrb_rpc->set_parameter('UI.Softboost', $softboost);
   print LOG "\nSet remOrb To SoftBoost: ", $remOrb_rpc->set_parameter('UI.Softboost', $softboost);
   } else {         
        $locOrb_rpc->set_parameter('UI.Softboost', '0' )
        $remOrb_rpc->set_parameter('UI.Softboost', '0' )
        }

print "BOOST & COMP ", $softboost," ", $compressible, "\n";

#stamp the date & release to the log file per run
printf STAT "\n%8s%10s", $tm, $release;

foreach $bw (@bw_list) {
   #the default criteria is for NonCompressible data
   my $expected_run1 = ($bw * $firstpass_nocomp);          #expect some performance degration here
   my $expected_run2 = ($bw * $secondpass_ratio);
   if ($expected_run2 > $max_ingress) { $expected_run2 = $max_ingress}   


   print LOG "\nThe tested file is $tested_file \n";

   if ($softboost)   {            #if SB then configure the DR for the tested BW
      config_CNISTNET ($dr, $dr_dest, $bw, $rtt, $loss);
      } else {               #This is the HB case    
#Only the sending rates are required to be set here.
#The receiving rates can be left as the default max_rate
          my $bw_bps = $bw * 1000000;        #bit/sec required for Orb send-rate setting
          print LOG "Set the remOrb SendRate To $bw \n", $remOrb_rpc->set_parameter('SlowSendRate', $bw_bps);
#          print LOG "Set the remOrb RecvRate To $bw \n", $remOrb_rpc->set_parameter('SlowRecvRate', $bw_bps);
          print LOG "Set the locOrb SendRate to $bw Mbps\n", $locOrb_rpc->set_parameter('SlowSendRate', $bw_bps);
#          print LOG "Set the locOrb RecvRate To $bw Mbps \n", $locOrb_rpc->set_parameter('SlowRecvRate', $bw_bps);
          }
       
#Start running the test 
         print LOG "\nStart the first run \n";
         print "Reset Compression History of the locOrb... ", $locOrb_rpc->send_command('CompressionHistory reset'), "\n";
         print "Reset Compression History of the remOrb... ", $remOrb_rpc->send_command('CompressionHistory reset'), "\n";
         sleep 3;
         $expected_rate = $expected_run1;
         is (run_lftp ($host, $file), 1, "First pass of $file over $bw Mbps") ;
         sleep 10;
#Start the second-run. Need to fillup the memory history [empty out the mem is an option?]
         print LOG "\nStart the second run \n";
         print "Reset Compression History of the locOrb... ", $locOrb_rpc->send_command('CompressionHistory reset'), "\n";
         print "Reset Compression History of the remOrb... ", $remOrb_rpc->send_command('CompressionHistory reset'), "\n";
         $expected_rate = $expected_run2;
         is (run_lftp ($host, $file), 1, "Second pass of $file session over $bw Mbps") ;
         sleep 10;
#Start the third run - expect the same result as the second
         print LOG "\nStart the third run \n";
         print "Reset Compression History of the locOrb... ", $locOrb_rpc->send_command('CompressionHistory reset'), "\n";
         print "Reset Compression History of the remOrb... ", $remOrb_rpc->send_command('CompressionHistory reset'), "\n";
         is (run_lftp ($host, $file), 1, "Third pass of $file session over $bw Mbps") ;
         print LOG "------------------------------------\n\n";
         sleep 10;
         }
#Test stops
    
#Windup the statistic line for the log & Reset DUT to the previous conditions
if ($softboost) {
   if ($compressible) {
      printf STAT "%15s\n\n", 'SB & Med-Comp';
      } else {
           printf STAT "%15s\n\n", 'SB & No-Comp';
           }   
   print LOG "\nReSet locOrb To HardBoost: ", $locOrb_rpc->set_parameter('UI.Softboost', '0');
   print LOG "\nReSet remOrb To HardBoost: ", $remOrb_rpc->set_parameter('UI.Softboost', '0');
   } else {
        if ($compressible) {  
           printf STAT "%15s\n\n", 'HB & Med-Comp';
           } else {
                printf STAT "%15s\n\n", 'HB & No-Comp';
                }
        }


#Recover the testbed default configuration
print LOG "Reset the locOrb SendRate To $maxbw_bps \n", $locOrb_rpc->set_parameter('SlowSendRate', $maxbw_bps);
print LOG "Reset the locOrb RecvRate To $maxbw_bps \n", $locOrb_rpc->set_parameter('SlowRecvRate', $maxbw_bps);
print LOG "Reset the remOrb SendRate To $maxbw_bps \n", $remOrb_rpc->set_parameter('SlowSendRate', $maxbw_bps);
print LOG "Reset the remOrb RecvRate To $maxbw_bps \n", $remOrb_rpc->set_parameter('SlowRecvRate', $maxbw_bps);
config_CNISTNET ($dr, $dr_dest, $maxbw, $rtt, $loss);


#Test Completed. Send the result out.
if ($send_mail) {
#   print `mail \-s \"Compression Performance For Release  $release\" engineering\@orbitaldata.com \< $stat_file`;
    print `mail \-s \"Compression Performance For Release $release\" dong\@orbitaldata.com \< $stat_file`;
   }


#********************************************************  
sub run_lftp
{
    my $host = shift ;
    my $file = shift;
    my $test = "lftp $host -e 'get $file -o /dev/null; bye'";
    print LOG "Invoke: $test \n";
    my $result = `$test | tail -1`;
    sleep 3;
   print LOG "\nThis is the LFTP test result: \n $result";
   print "\nThis is the LFTP test result: \n $result";

#Verify the results ..
   my @rate = split(/\s+/, $result);
   my $bit_xfer = shift(@rate) * 8;              
   shift(@rate); shift(@rate); shift(@rate);
   my $sec_xfer = shift(@rate);
   print LOG "The expected rate: $expected_rate Mbits/sec\n";
   my $actual_rate = $bit_xfer/$sec_xfer/1000000;        #in Mbps
   print  "The actual rate: $actual_rate \n";
   print LOG  "The actual rate: $actual_rate \n";

   if  ($actual_rate >= $expected_rate) {
      print LOG "Throughput is in the expected range - PASS! \n";
      printf STAT "%8.2f\/P", $actual_rate;
      return 1;
      } else {
           print LOG "Throughput is NOT in the expected range - FAIL! \n";
           printf STAT "%8.2f\/F", $actual_rate;
           return  0 ;
           } 
           
}

#*************************************************************************
sub config_CNISTNET
#Need 4 inputs: <DR IP> <REM-NETWORK> <BW Mbps> <RTT> <LOSS>
{
  print LOG "Configure CNISTNET DR: $_[0]\n";
  my $bw_Kbps = $_[2] * 1000;	#change to Kbps
  my $set_dr = "ssh $_[0] \"\/root\/set_bw.sh $_[1] $bw_Kbps $_[3] $_[4]\" ";
#  print "\nTESTING..Show DR config \n", $set_dr;
  $set_dr = `$set_dr`;
  print LOG "Below is the CNISTNET DR configuration: \n $set_dr \n";
}
                                                                                                                                                                     
                                                                                                                                                                     
#************************************************************************
# This is for the Meshed Testbed DR
# /tools/test/test_common/neset.sh  -bw 100e6 -rtt 100 -loss 1
#Need 3 inputs: <DR IP> <BW> <RTT> <LOSS>
#------------------------------------------------------------------------
sub config_TC
{
  my $bw = "$_[1]"."e6";
  print LOG "Configure TC DR: $_[0]\n";
  my $set_dr = "ssh $_[0] \"\/tools\/tests\/test_common\/neset.sh \-bw $bw \-rtt $_[2] \-loss $_[3] \" ";
  $set_dr = `$set_dr`;
}
#***********************************************************************
sub orb_version
{
    my $orb_rpc = shift;
    my $ver = $orb_rpc->get_system_variable("Version");
    my @ver = split(/\s+/, $ver);
    my $i = 0; my $rel ="";
    while ($ver[$i]) {
       if ($ver[$i++] eq "Release") {
          $rel = "$ver[$i++]"."-";
          my $subver = int ($ver[++$i]);
          $rel = "$rel"."$subver";
        }
    }
    return $rel;
}
 
#*************************************************************************


=head1 COPYRIGHT
Copyright (c) 2005, Author(s). All rights reserved.
This module is the property of Orbital Data Corporation.
It may not be used or modified by anyone without express permission
of Orbital Data Corporation.
=cut
