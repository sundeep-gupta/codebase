#!/tools/bin/perl

=head NAME
stress.pl

=head1 DESCRIPTION
1. Config the tested Orb to HB with a specified BW value.
2. Run perform test up to 500 sessions
This is for Lyon release.

=head2 Test Category
Performance

=head1 ENVIRONMENT
* 2 Orbs with softboost configured with at least 50Mbps license.
* DR = 45Mbsec, 200RTT and 0% DROP (flow_1)


=head1 APPLICATIONS
=cut
=head1 bugs
=cut

=head1 Authors
Dong Duong 
04/20/05
=cut 

use lib '/tools/lib/perl5/site_perl/5.8.4';
use Test::More  qw(no_plan); 
use Time::localtime;  
use Carp ;
use Getopt::Std ;
use Net::RawIP qw ( :pcap) ;
use XMLRPC::Lite;
use Data::Dumper;
#use orbital_constants;
use orbital_rpc;


my $testcase="stress";

#Require @least 2 inputs: the tested ORB and the IPERF Server.
getopt ("d,r,o,s") ;

if (  ! $opt_s || ! $opt_o) {
  print "Usage: $testcase -d <dr> -r <rtt> -o <OrbIP> -s <Iperf Server>  \n" ;
  exit 1 ;
}
my $host = $opt_s;
chomp ($host );
my $orb = $opt_o; chomp ($orb);       #setup the Orb for XMLRPC
my $url = "http://$orb:2050/RPC2";
my $rpc = Orbital::Rpc->new($url);
my $version = $rpc->get_system_variable("Version");
my $bw = 45;                      #Mbps.
my $net1_rtt = 100;
if ($opt_r) { $net1_rtt = $opt_r; chomp ($net1_rtt) }
my $dr = "20.20.20.1";           #default Delay Router 
if ($opt_d)
  { $dr = $opt_d;
    chomp ($dr)
  }
my $duration = 6000;
my $sess =1;
my $perc = 0.93;                  #expect throughout percentage
my $expected_flow1_rate;
my $sleep_time = $duration + 50; #Tune this value, for test with large number of sessions.
my $tm-localtime;
$tm = sprintf("%02d%02d%04d", $tm->mday,($tm->mon)+1, $tm->year+1900);

my $OUTPUT = "STDOUT";
my $log_result = 1;        #saved output of the test?.
if ($log_result) {
   my $log_file = "..\/logs\/"."$testcase"."_$tm".".log";
   open (LOG,  "> $log_file") || die "Could not open the file $log_file \n";
   $OUTPUT = "LOG";
}
my $stat_result=1;
my $stat_file = "..\/logs\/"."$testcase"."_stats"."_$tm".".log"; #contains perf results of all individual test.
if ($stat_result) {
   open (PERF,  "> $stat_file") || die "Could not open the file $stat_file \n";
   $STAT = "PERF";
   print $STAT "\n";
   print $STAT `date`;
   print $STAT "\n$version \n";
   print $STAT "-----------------------------------\n\n";
}

#Start the test ...
#Configure the DR only once    
    my $bw_Kb = $bw * 1000;
    config_DR ($dr, $net1_add, $bw_Kb, $net1_rtt, 0);
    config_DR ($dr, $net2_add, $bw_Kb, $net1_rtt, 0);  #Reverse direction
    sleep 5;
    my $bw_bs = $bw * 1000000;
    print $OUTPUT "Set SendRate To: ", $rpc->set_parameter('SlowSendRate', $bw_bs);
    sleep 5;
    if ($bw_bs == $rpc->get_parameter('SlowSendRate')) {
          print $OUTPUT "The SendRate was sucessfully set: $bw_bs \n";
       } else {
          print $OUTPUT "The SendRate is not properly set to $bw_bs \n";
          print $OURPUT "The current SendRate is: ", $rpc->get_parameter('SlowSendRate'), "\n";
          exit; }
      is (run_stress ($host, $bw, $duration), 1, "Stress test over HB & Compression") ;
#Test Completed. Send the result out.
#  print `mail \-s \"Performance Test Results\" dong\@orbitaldata.com \< ..\/logs\/$stat_file`;

#********************************************************  
sub run_stress
{
    my $host = shift ;
    my $duration = shift ;
    my $pass="FAIL";
#Start compression test
   my $comp_sess = "/tools/tests/dong/iperf_c.sh $host 999999 500 &";
   my $acc_sess = "/tools/tests/dong/iperf_c.sh $host 999999 500 &";
   my $comp_sess = "/tools/tests/dong/iperf_c.sh $host 999999 500 &";
#*************************************************************************
sub config_DR
#Need 4 inputs: <DR IP> <REM-NETWORK> <BW> <RTT> <LOSS>
{
  print $OUTPUT "Configure the DR: $_[0]\n";
  my $set_dr = "ssh $_[0] \".\/set_bw.sh $_[1] $_[2] $_[3] $_[4]\" ";
  $set_dr = `$set_dr`;
  print $OUTPUT "Below is the DR configuration: \n $set_dr \n";
}
 
#*************************************************************************
sub kill_iperf
{
 my $string = `ps -e | grep iperf | tail -1 `;
 print $OUTPUT "This Iperf process is running $string \n";
 my @field = split(/\s+/,$string);
 my $counter=0;
 if ($field[0] eq "") {$counter++}
 if (( $string =~ /iperf/)) {
  if (`kill $field[$counter]`) {
           print $OUTPUT  "The Iperf deamon ID:$field[$counter] was not killed \n";
                 } else {
           print $OUTPUT "The Iperf deamon ID:$field[$counter] was killed \n";
                 }
        }else {
        print $OUTPUT "Iperf service was not running\n";
        }
} #end of kill_iperf

#*************************************************************************
sub kill_all_iperf
{
   my $find_pid ="ps -e | grep iperf ";
   @iperf_pid = `$find_pid`;
   print $OUTPUT "Active IPERF PID: @iperf_pid \n";
   my $i=0;
   while ($iperf_pid[$i])
   {
     print $OUTPUT "Iperf Process: $iperf_pid[$i] \n";
     if ($iperf_pid[$i] =~ /iperf/){
     my @field = split(/\s+/, $iperf_pid[$i]);
     my $counter = 0;
     if ($field[0] eq "") {$counter++}  #skip the 1st member if blank
     if (`kill $field[$counter]`) {
           print $OUTPUT "The Iperf deamon ID:$field[$counter] was not killed \n\n";
                 } else {
           print $OUTPUT "The Iperf deamon ID:$field[$counter] was killed \n\n";
                 }
        }else {
        print $OUTPUT "Iperf service was not running\n";
        }
                                                                                                                              
     $i++;
     sleep 2;
   } #end while
} #end of kill_all_iperf


=head1 COPYRIGHT
Copyright (c) 2005, Author(s). All rights reserved.
This module is the property of Orbital Data Corporation.
It may not be used or modified by anyone without express permission
of Orbital Data Corporation.
=cut
