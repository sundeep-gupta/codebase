#!/usr/bin/perl -w

use strict;

use FindBin;
#use lib "$FindBin::Bin";
use XMLRPC::Lite;
use Data::Dumper;
use orbital_constants;
use celestix_lcd;
use celestix_buttons;
use celestix_menu;
use orbital_rpc;

#
# Initialization code
#

my $Rpc = Orbital::Rpc->new(DONG_HOST);

sleep 3;
print "Test started.\n";
   #
   # If there was an Alert, display it
   #
#   (my $NumAlerts, my @Alerts) = $Rpc->get_alerts();
#      print("Displaying Alert!\n");
#      print" @Alerts \n";

   my $MaxAllowedThroughput = $Rpc->get_throughput();
   my $IsPassthrough = $Rpc->get_parameter("PassThrough");
   print("PassThrough: $IsPassthrough\n"); 
      
   
   (my $IPAddress, my $IPMask, my $Dns, my $Gateway, my $Dhcp, my $Hostname) = $Rpc->get_system_net_info();
   
   print "IP: $IPAddress\n";
   print "Netmask: $IPMask\n";
   print "Gateway: $Gateway\n";
   print "DNS: $Dns\n";
   
##########################################################################
#                       HELPER FUNCTIONS
##########################################################################

#
# Takes and address like: 255.101.1.20 and returns 255.101.001.020 
#
sub ExpandAddress
{
   my( $addr ) = @_;
      
   if( $addr =~ /^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$/ ) {
      $addr = sprintf "%03d.%03d.%03d.%03d", $1 ,$2, $3, $4;
   } else {
      $addr = "000.000.000.000";
   }
   return $addr;
}


#
# Takes and address like: 255.101.001.020 and returns 255.101.1.20
# (The reverse of ExpandAddress()
#
sub CompactAddress
{
  my ( $addr ) = @_;

  if( $addr =~ /^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$/ ) {
    my $addr1 = sprintf "%d", $1;
    my $addr2 = sprintf "%d", $2;
    my $addr3 = sprintf "%d", $3;
    my $addr4 = sprintf "%d", $4;
    $addr = "$addr1.$addr2.$addr3.$addr4";
  }
  return $addr;
}

#
# bits2mask: Example: converts 24 => 255.255.255.0
#
sub Bits2Mask
{
	my ($Bits )= @_;
	my $Root = 4294967296 - ( 2 ** (32-$Bits) );
	return &int2quad($Root);
}

#
# mask2bits: Example: converts 255.255.255.0 => 24
#
sub Mask2Bits
{
	my ($Mask) = @_;
	my $Quad = &quad2int($Mask);
	my $Bits = 0;

	while ($Quad > 0)
	{
	   $Quad = $Quad << 1;
      $Bits ++;
	}		
	
	return $Bits;
}

#
# Function take from Net::NetMask
# This code is © 2003, Luis E. Muñoz. It is provided with no warranty and
# can be distributed under the same terms as Perl itself.
#
sub quad2int
{
	my @bytes = split(/\./,$_[0]);
	return undef unless @bytes == 4 && ! grep {!(/\d+$/
&& $_<256)} @bytes;
	return unpack("N",pack("C4",@bytes));
}

#
# Function take from Net::NetMask
# This code is © 2003, Luis E. Muñoz. It is provided with no warranty and
# can be distributed under the same terms as Perl itself.
#
sub int2quad
{
	return join('.',unpack('C4', pack("N", $_[0])));
}

#
#
#
sub ShowUsageGraph
{
    #~ $panel->send("focusGFXsurface", 2);
    #~ $panel->box( 68, 35, 87, 50 );
    #~ $panel->clear( 69, 36, 87, 50 );
    #~ for( $i=0; $i<=20; $i++ ) {
      #~ my $x = 86 - $i;
      #~ my $y = 50 - rand(50);
      #~ $panel->line( $x, 50, $x, $y);
    #~ }
    #~ $Lcd->snd1("blitGFXsurface", 68, 35, 68, 35, 19, 15);
    #~ $Lcd->snd1("focusGFXsurface", 0);
                                                                                                   
    #~ if( $dio ) {
      #~ open FD, "df /var |";
      #~ while( <FD> ) {
        #~ if( /([0-9]+)\%/ ) {
          #~ $bar = $1 / 20;
          #~ last;
        #~ }
      #~ }
      #~ close FD;
                                                                                                   
      #~ $panel->box( 98, 35, 117, 51 );
      #~ if ( ref($panel) =~ /Drawd$/ ) {
        #~ $panel->clear( 99, 36, 116, 50 );
      #~ }
      #~ for( $i=0; $i<$bar; $i++ ) {
        #~ my $y1 = 50 - $i * 3;
        #~ my $y2 = $y1 - 2;
        #~ $panel->box( 98, $y1, 117, $y2 );
      #~ }
                                                                                                   
    #~ }
    
    #~ if( $dio ) {
     #~ $self->got_it;
    #~ }
   
}
