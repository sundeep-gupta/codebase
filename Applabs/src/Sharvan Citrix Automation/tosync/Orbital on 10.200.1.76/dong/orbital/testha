#!/usr/bin/perl -w
 
use FindBin;
use XMLRPC::Lite;
use Data::Dumper;
use orbital_constants;
use orbital_rpc;
use Getopt::Std; 
#
# Initialization code
#
my $orb = "10.200.38.63" ;
getopt ("o");
if ($opt_o) {$orb = $opt_o; chomp($orb)}
my $Rpc = Orbital::Rpc->new("http://$orb:2050/RPC2");
#my $Rpc = Orbital::Rpc->new('http://localhost:2050/RPC2');
sleep 3;
print "Test started.\n";
   #
   # If there was an Alert, display it
   #
   (my $NumAlerts, my @Alerts) = $Rpc->get_alerts();
      print("Displaying Alert!\n");
      print" @Alerts \n";
 
   
  my $ha = $Rpc->get_parameter("HA.ENABLED");
  print "HA-ENABLE? : $ha \n";
  
  $ha = $Rpc->get_system_var_struct("HA.VRRP.VMIP");
  print "HA-VMIP:  ${$ha}{'Dotted'} \n";

  $ha = $Rpc->get_system_var_struct("HA.PARTNER");
  print "HA PARTNER  $ha \n";

  $ha = $Rpc->get_parameter("HA.VRRP.PRIORITY");
  print "HA PRIORITY  $ha \n";
#  my $ha = $Rpc->get_parameter("HA.VRRP.STATUS");    #Does not work
#  print "HA-VRRP-STATUS? : $ha \n";
  $ha = $Rpc->get_system_variable("SslClientName");  #case sensitive for system variable
  print "SslClientName $ha \n";
  $ha = $Rpc->get_system_variable("HaParameters");   #output HA structure: VMIP, VRRP ..
  
  $ha = $Rpc->get_system_variable("HaState");        #print out state of an HA box 
  print "THIS BOX is running as $ha \n";
  
#  $ha = $Rpc->get_system_variable("HaSecondaryExists");        #doesnotwork 
#  print "HA SEC EXIST ?  $ha \n";
  
 
